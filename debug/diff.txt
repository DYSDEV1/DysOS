Binary files /home/dys/Desktop/os_dev/DysOS/build/gdt.o and /home/dys/Desktop/os_dev/wyoos/build/gdt.o differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/interrupts.o and /home/dys/Desktop/os_dev/wyoos/build/interrupts.o differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/interruptstubs.o and /home/dys/Desktop/os_dev/wyoos/build/interruptstubs.o differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/kernel.bin and /home/dys/Desktop/os_dev/wyoos/build/kernel.bin differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/kernel.iso and /home/dys/Desktop/os_dev/wyoos/build/kernel.iso differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/kernel.o and /home/dys/Desktop/os_dev/wyoos/build/kernel.o differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/keyboard.o and /home/dys/Desktop/os_dev/wyoos/build/keyboard.o differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/loader.o and /home/dys/Desktop/os_dev/wyoos/build/loader.o differ
Binary files /home/dys/Desktop/os_dev/DysOS/build/port.o and /home/dys/Desktop/os_dev/wyoos/build/port.o differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/command.md /home/dys/Desktop/os_dev/wyoos/command.md
--- /home/dys/Desktop/os_dev/DysOS/command.md	2025-04-18 10:55:33.439123993 +0200
+++ /home/dys/Desktop/os_dev/wyoos/command.md	1970-01-01 01:00:00.000000000 +0100
@@ -1,14 +0,0 @@
-qemu-system-i386 -kernel kernel.bin -d int -no-reboot -no-shutdown
-
-objdump -D build/kernel.bin > debug.txt
-
-
-Debugging with gdb: 
-
-qemu-system-i386 -kernel build/kernel.bin -S -s
-
-
-gdb 
-
-file build/kernel.bin      
-target remote localhost:1234
\ No newline at end of file
diff -ruN /home/dys/Desktop/os_dev/DysOS/debug/debug.md /home/dys/Desktop/os_dev/wyoos/debug/debug.md
--- /home/dys/Desktop/os_dev/DysOS/debug/debug.md	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/debug/debug.md	1970-01-01 01:00:00.000000000 +0100
@@ -1,20 +0,0 @@
-check_exception old: 0xffffffff new 0x6
- 11569: v=06 e=0000 i=0 cpl=0 IP=0010:0001000d pc=0001000d SP=0018:001018a0 env->regs[R_EAX]=00010000
-EAX=00010000 EBX=00103a70 ECX=00000021 EDX=00101968
-ESI=00000000 EDI=00000000 EBP=001018cc ESP=001018a0
-EIP=0001000d EFL=00000016 [----AP-] CPL=0 II=0 A20=1 SMM=0 HLT=0
-ES =0018 00000000 03ffffff 00c09300 DPL=0 DS   [-WA]
-CS =0010 00000000 03ffffff 00c09a00 DPL=0 CS32 [-R-]
-SS =0018 00000000 ffffffff 00cf9300 DPL=0 DS   [-WA]
-DS =0018 00000000 03ffffff 00c09300 DPL=0 DS   [-WA]
-FS =0018 00000000 03ffffff 00c09300 DPL=0 DS   [-WA]
-GS =0018 00000000 03ffffff 00c09300 DPL=0 DS   [-WA]
-LDT=0000 00000000 0000ffff 00008200 DPL=0 LDT
-TR =0000 00000000 0000ffff 00008b00 DPL=0 TSS32-busy
-GDT=     00101da8 00000020
-IDT=     00301e00 000007ff
-CR0=00000011 CR2=00000000 CR3=00000000 CR4=00000000
-DR0=00000000 DR1=00000000 DR2=00000000 DR3=00000000 
-DR6=ffff0ff0 DR7=00000400
-CCS=00000014 CCD=ba10ad40 CCO=EFLAGS
-EFER=0000000000000000
\ No newline at end of file
diff -ruN /home/dys/Desktop/os_dev/DysOS/debug/debug.txt /home/dys/Desktop/os_dev/wyoos/debug/debug.txt
--- /home/dys/Desktop/os_dev/DysOS/debug/debug.txt	2025-04-18 09:54:31.995791610 +0200
+++ /home/dys/Desktop/os_dev/wyoos/debug/debug.txt	1970-01-01 01:00:00.000000000 +0100
@@ -1,2911 +0,0 @@
-
-build/kernel.bin:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00100000 <loader-0xc>:
-  100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
-  100006:	00 00                	add    %al,(%eax)
-  100008:	fb                   	sti    
-  100009:	4f                   	dec    %edi
-  10000a:	52                   	push   %edx
-  10000b:	e4                 	in     $0xbc,%al
-
-0010000c <loader>:
-  10000c:	bc e0 1d 10 00       	mov    $0x101de0,%esp
-  100011:	e8 70 02 00 00       	call   100286 <callConstructors>
-  100016:	50                   	push   %eax
-  100017:	53                   	push   %ebx
-  100018:	e8 a3 02 00 00       	call   1002c0 <kernelMain>
-
-0010001d <_stop>:
-  10001d:	fa                   	cli    
-  10001e:	f4                   	hlt    
-  10001f:	eb fc                	jmp    10001d <_stop>
-
-00100021 <_Z6printfPKc>:
-  100021:	55                   	push   %ebp
-  100022:	89 e5                	mov    %esp,%ebp
-  100024:	53                   	push   %ebx
-  100025:	83 ec 10             	sub    $0x10,%esp
-  100028:	e8 56 03 00 00       	call   100383 <__x86.get_pc_thunk.ax>
-  10002d:	05 43 1d 00 00       	add    $0x1d43,%eax
-  100032:	c7 45 f4 00 80 0b 00 	movl   $0xb8000,-0xc(%ebp)
-  100039:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%ebp)
-  10003f:	e9 ad 01 00 00       	jmp    1001f1 <_Z6printfPKc+0x1d0>
-  100044:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
-  100048:	8b 55 08             	mov    0x8(%ebp),%edx
-  10004b:	01 ca                	add    %ecx,%edx
-  10004d:	0f b6 12             	movzbl (%edx),%edx
-  100050:	0f be d2             	movsbl %dl,%edx
-  100053:	83 fa 0a             	cmp    $0xa,%edx
-  100056:	75 1c                	jne    100074 <_Z6printfPKc+0x53>
-  100058:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  10005f:	83 c2 01             	add    $0x1,%edx
-  100062:	88 90 71 00 20 00    	mov    %dl,0x200071(%eax)
-  100068:	c6 80 70 00 20 00 00 	movb   $0x0,0x200070(%eax)
-  10006f:	e9 83 00 00 00       	jmp    1000f7 <_Z6printfPKc+0xd6>
-  100074:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  10007b:	0f b6 ca             	movzbl %dl,%ecx
-  10007e:	89 ca                	mov    %ecx,%edx
-  100080:	c1 e2 02             	shl    $0x2,%edx
-  100083:	01 ca                	add    %ecx,%edx
-  100085:	c1 e2 04             	shl    $0x4,%edx
-  100088:	89 d1                	mov    %edx,%ecx
-  10008a:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  100091:	0f b6 d2             	movzbl %dl,%edx
-  100094:	01 ca                	add    %ecx,%edx
-  100096:	8d 0c 12             	lea    (%edx,%edx,1),%ecx
-  100099:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  10009c:	01 ca                	add    %ecx,%edx
-  10009e:	0f b7 12             	movzwl (%edx),%edx
-  1000a1:	89 d3                	mov    %edx,%ebx
-  1000a3:	b3 00                	mov    $0x0,%bl
-  1000a5:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
-  1000a9:	8b 55 08             	mov    0x8(%ebp),%edx
-  1000ac:	01 ca                	add    %ecx,%edx
-  1000ae:	0f b6 12             	movzbl (%edx),%edx
-  1000b1:	66 0f be d2          	movsbw %dl,%dx
-  1000b5:	09 d3                	or     %edx,%ebx
-  1000b7:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  1000be:	0f b6 ca             	movzbl %dl,%ecx
-  1000c1:	89 ca                	mov    %ecx,%edx
-  1000c3:	c1 e2 02             	shl    $0x2,%edx
-  1000c6:	01 ca                	add    %ecx,%edx
-  1000c8:	c1 e2 04             	shl    $0x4,%edx
-  1000cb:	89 d1                	mov    %edx,%ecx
-  1000cd:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  1000d4:	0f b6 d2             	movzbl %dl,%edx
-  1000d7:	01 ca                	add    %ecx,%edx
-  1000d9:	8d 0c 12             	lea    (%edx,%edx,1),%ecx
-  1000dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  1000df:	01 ca                	add    %ecx,%edx
-  1000e1:	89 d9                	mov    %ebx,%ecx
-  1000e3:	66 89 0a             	mov    %cx,(%edx)
-  1000e6:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  1000ed:	83 c2 01             	add    $0x1,%edx
-  1000f0:	88 90 70 00 20 00    	mov    %dl,0x200070(%eax)
-  1000f6:	90                   	nop
-  1000f7:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  1000fe:	80 fa 4f             	cmp    $0x4f,%dl
-  100101:	76 17                	jbe    10011a <_Z6printfPKc+0xf9>
-  100103:	c6 80 70 00 20 00 00 	movb   $0x0,0x200070(%eax)
-  10010a:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  100111:	83 c2 01             	add    $0x1,%edx
-  100114:	88 90 71 00 20 00    	mov    %dl,0x200071(%eax)
-  10011a:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  100121:	80 fa 18             	cmp    $0x18,%dl
-  100124:	0f 86 c2 00 00 00    	jbe    1001ec <_Z6printfPKc+0x1cb>
-  10012a:	c6 80 71 00 20 00 00 	movb   $0x0,0x200071(%eax)
-  100131:	e9 98 00 00 00       	jmp    1001ce <_Z6printfPKc+0x1ad>
-  100136:	c6 80 70 00 20 00 00 	movb   $0x0,0x200070(%eax)
-  10013d:	eb 73                	jmp    1001b2 <_Z6printfPKc+0x191>
-  10013f:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  100146:	0f b6 ca             	movzbl %dl,%ecx
-  100149:	89 ca                	mov    %ecx,%edx
-  10014b:	c1 e2 02             	shl    $0x2,%edx
-  10014e:	01 ca                	add    %ecx,%edx
-  100150:	c1 e2 04             	shl    $0x4,%edx
-  100153:	89 d1                	mov    %edx,%ecx
-  100155:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  10015c:	0f b6 d2             	movzbl %dl,%edx
-  10015f:	01 ca                	add    %ecx,%edx
-  100161:	8d 0c 12             	lea    (%edx,%edx,1),%ecx
-  100164:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  100167:	01 ca                	add    %ecx,%edx
-  100169:	0f b7 12             	movzwl (%edx),%edx
-  10016c:	89 d3                	mov    %edx,%ebx
-  10016e:	b3 00                	mov    $0x0,%bl
-  100170:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  100177:	0f b6 ca             	movzbl %dl,%ecx
-  10017a:	89 ca                	mov    %ecx,%edx
-  10017c:	c1 e2 02             	shl    $0x2,%edx
-  10017f:	01 ca                	add    %ecx,%edx
-  100181:	c1 e2 04             	shl    $0x4,%edx
-  100184:	89 d1                	mov    %edx,%ecx
-  100186:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  10018d:	0f b6 d2             	movzbl %dl,%edx
-  100190:	01 ca                	add    %ecx,%edx
-  100192:	8d 0c 12             	lea    (%edx,%edx,1),%ecx
-  100195:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  100198:	01 ca                	add    %ecx,%edx
-  10019a:	83 cb 20             	or     $0x20,%ebx
-  10019d:	89 d9                	mov    %ebx,%ecx
-  10019f:	66 89 0a             	mov    %cx,(%edx)
-  1001a2:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  1001a9:	83 c2 01             	add    $0x1,%edx
-  1001ac:	88 90 70 00 20 00    	mov    %dl,0x200070(%eax)
-  1001b2:	0f b6 90 70 00 20 00 	movzbl 0x200070(%eax),%edx
-  1001b9:	80 fa 4f             	cmp    $0x4f,%dl
-  1001bc:	76 81                	jbe    10013f <_Z6printfPKc+0x11e>
-  1001be:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  1001c5:	83 c2 01             	add    $0x1,%edx
-  1001c8:	88 90 71 00 20 00    	mov    %dl,0x200071(%eax)
-  1001ce:	0f b6 90 71 00 20 00 	movzbl 0x200071(%eax),%edx
-  1001d5:	80 fa 18             	cmp    $0x18,%dl
-  1001d8:	0f 86 58 ff ff ff    	jbe    100136 <_Z6printfPKc+0x115>
-  1001de:	c6 80 70 00 20 00 00 	movb   $0x0,0x200070(%eax)
-  1001e5:	c6 80 71 00 20 00 00 	movb   $0x0,0x200071(%eax)
-  1001ec:	66 83 45 fa 01       	addw   $0x1,-0x6(%ebp)
-  1001f1:	0f b7 4d fa          	movzwl -0x6(%ebp),%ecx
-  1001f5:	8b 55 08             	mov    0x8(%ebp),%edx
-  1001f8:	01 ca                	add    %ecx,%edx
-  1001fa:	0f b6 12             	movzbl (%edx),%edx
-  1001fd:	84 d2                	test   %dl,%dl
-  1001ff:	0f 85 3f fe ff ff    	jne    100044 <_Z6printfPKc+0x23>
-  100205:	90                   	nop
-  100206:	90                   	nop
-  100207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  10020a:	c9                   	leave  
-  10020b:	c3                   	ret    
-
-0010020c <_Z9printfHexh>:
-  10020c:	55                   	push   %ebp
-  10020d:	89 e5                	mov    %esp,%ebp
-  10020f:	83 ec 14             	sub    $0x14,%esp
-  100212:	e8 6c 01 00 00       	call   100383 <__x86.get_pc_thunk.ax>
-  100217:	05 59 1b 00 00       	add    $0x1b59,%eax
-  10021c:	8b 55 08             	mov    0x8(%ebp),%edx
-  10021f:	88 55 ec             	mov    %dl,-0x14(%ebp)
-  100222:	8d 90 38 f9 ff ff    	lea    -0x6c8(%eax),%edx
-  100228:	89 55 fc             	mov    %edx,-0x4(%ebp)
-  10022b:	8d 90 3b f9 ff ff    	lea    -0x6c5(%eax),%edx
-  100231:	89 55 f8             	mov    %edx,-0x8(%ebp)
-  100234:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
-  100238:	c0 ea 04             	shr    $0x4,%dl
-  10023b:	0f b6 d2             	movzbl %dl,%edx
-  10023e:	89 d1                	mov    %edx,%ecx
-  100240:	83 e1 0f             	and    $0xf,%ecx
-  100243:	8b 55 f8             	mov    -0x8(%ebp),%edx
-  100246:	01 ca                	add    %ecx,%edx
-  100248:	0f b6 0a             	movzbl (%edx),%ecx
-  10024b:	8b 55 fc             	mov    -0x4(%ebp),%edx
-  10024e:	88 0a                	mov    %cl,(%edx)
-  100250:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
-  100254:	89 d1                	mov    %edx,%ecx
-  100256:	83 e1 0f             	and    $0xf,%ecx
-  100259:	8b 55 f8             	mov    -0x8(%ebp),%edx
-  10025c:	01 ca                	add    %ecx,%edx
-  10025e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
-  100261:	83 c1 01             	add    $0x1,%ecx
-  100264:	0f b6 12             	movzbl (%edx),%edx
-  100267:	88 11                	mov    %dl,(%ecx)
-  100269:	8d 80 4c f9 ff ff    	lea    -0x6b4(%eax),%eax
-  10026f:	50                   	push   %eax
-  100270:	e8 ac fd ff ff       	call   100021 <_Z6printfPKc>
-  100275:	83 c4 04             	add    $0x4,%esp
-  100278:	ff 75 fc             	push   -0x4(%ebp)
-  10027b:	e8 a1 fd ff ff       	call   100021 <_Z6printfPKc>
-  100280:	83 c4 04             	add    $0x4,%esp
-  100283:	90                   	nop
-  100284:	c9                   	leave  
-  100285:	c3                   	ret    
-
-00100286 <callConstructors>:
-  100286:	55                   	push   %ebp
-  100287:	89 e5                	mov    %esp,%ebp
-  100289:	53                   	push   %ebx
-  10028a:	83 ec 14             	sub    $0x14,%esp
-  10028d:	e8 f5 00 00 00       	call   100387 <__x86.get_pc_thunk.bx>
-  100292:	81 c3 de 1a 00 00    	add    $0x1ade,%ebx
-  100298:	c7 c0 6c 1d 10 00    	mov    $0x101d6c,%eax
-  10029e:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  1002a1:	eb 0b                	jmp    1002ae <callConstructors+0x28>
-  1002a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-  1002a6:	8b 00                	mov    (%eax),%eax
-  1002a8:	ff d0                	call   *%eax
-  1002aa:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
-  1002ae:	c7 c0 6c 1d 10 00    	mov    $0x101d6c,%eax
-  1002b4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
-  1002b7:	75 ea                	jne    1002a3 <callConstructors+0x1d>
-  1002b9:	90                   	nop
-  1002ba:	90                   	nop
-  1002bb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1002be:	c9                   	leave  
-  1002bf:	c3                   	ret    
-
-001002c0 <kernelMain>:
-  1002c0:	55                   	push   %ebp
-  1002c1:	89 e5                	mov    %esp,%ebp
-  1002c3:	53                   	push   %ebx
-  1002c4:	81 ec 64 04 00 00    	sub    $0x464,%esp
-  1002ca:	e8 b8 00 00 00       	call   100387 <__x86.get_pc_thunk.bx>
-  1002cf:	81 c3 a1 1a 00 00    	add    $0x1aa1,%ebx
-  1002d5:	8d 83 4f f9 ff ff    	lea    -0x6b1(%ebx),%eax
-  1002db:	50                   	push   %eax
-  1002dc:	e8 40 fd ff ff       	call   100021 <_Z6printfPKc>
-  1002e1:	83 c4 04             	add    $0x4,%esp
-  1002e4:	8d 83 54 f9 ff ff    	lea    -0x6ac(%ebx),%eax
-  1002ea:	50                   	push   %eax
-  1002eb:	e8 31 fd ff ff       	call   100021 <_Z6printfPKc>
-  1002f0:	83 c4 04             	add    $0x4,%esp
-  1002f3:	8d 83 88 f9 ff ff    	lea    -0x678(%ebx),%eax
-  1002f9:	50                   	push   %eax
-  1002fa:	e8 22 fd ff ff       	call   100021 <_Z6printfPKc>
-  1002ff:	83 c4 04             	add    $0x4,%esp
-  100302:	8d 83 bc f9 ff ff    	lea    -0x644(%ebx),%eax
-  100308:	50                   	push   %eax
-  100309:	e8 13 fd ff ff       	call   100021 <_Z6printfPKc>
-  10030e:	83 c4 04             	add    $0x4,%esp
-  100311:	8d 83 54 f9 ff ff    	lea    -0x6ac(%ebx),%eax
-  100317:	50                   	push   %eax
-  100318:	e8 04 fd ff ff       	call   100021 <_Z6printfPKc>
-  10031d:	83 c4 04             	add    $0x4,%esp
-  100320:	8d 83 4f f9 ff ff    	lea    -0x6b1(%ebx),%eax
-  100326:	50                   	push   %eax
-  100327:	e8 f5 fc ff ff       	call   100021 <_Z6printfPKc>
-  10032c:	83 c4 04             	add    $0x4,%esp
-  10032f:	83 ec 0c             	sub    $0xc,%esp
-  100332:	8d 45 d8             	lea    -0x28(%ebp),%eax
-  100335:	50                   	push   %eax
-  100336:	e8 51 00 00 00       	call   10038c <_ZN21GlobalDescriptorTableC1Ev>
-  10033b:	83 c4 10             	add    $0x10,%esp
-  10033e:	83 ec 04             	sub    $0x4,%esp
-  100341:	8d 45 d8             	lea    -0x28(%ebp),%eax
-  100344:	50                   	push   %eax
-  100345:	6a 20                	push   $0x20
-  100347:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
-  10034d:	50                   	push   %eax
-  10034e:	e8 af 08 00 00       	call   100c02 <_ZN16InterruptManagerC1EtP21GlobalDescriptorTable>
-  100353:	83 c4 10             	add    $0x10,%esp
-  100356:	83 ec 08             	sub    $0x8,%esp
-  100359:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
-  10035f:	50                   	push   %eax
-  100360:	8d 85 98 fb ff ff    	lea    -0x468(%ebp),%eax
-  100366:	50                   	push   %eax
-  100367:	e8 76 11 00 00       	call   1014e2 <_ZN14KeyboardDriverC1EP16InterruptManager>
-  10036c:	83 c4 10             	add    $0x10,%esp
-  10036f:	83 ec 0c             	sub    $0xc,%esp
-  100372:	8d 85 b4 fb ff ff    	lea    -0x44c(%ebp),%eax
-  100378:	50                   	push   %eax
-  100379:	e8 00 10 00 00       	call   10137e <_ZN16InterruptManager8ActivateEv>
-  10037e:	83 c4 10             	add    $0x10,%esp
-  100381:	eb fe                	jmp    100381 <kernelMain+0xc1>
-
-00100383 <__x86.get_pc_thunk.ax>:
-  100383:	8b 04 24             	mov    (%esp),%eax
-  100386:	c3                   	ret    
-
-00100387 <__x86.get_pc_thunk.bx>:
-  100387:	8b 1c 24             	mov    (%esp),%ebx
-  10038a:	c3                   	ret    
-  10038b:	90                   	nop
-
-0010038c <_ZN21GlobalDescriptorTableC1Ev>:
-  10038c:	55                   	push   %ebp
-  10038d:	89 e5                	mov    %esp,%ebp
-  10038f:	83 ec 18             	sub    $0x18,%esp
-  100392:	e8 ec ff ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100397:	05 d9 19 00 00       	add    $0x19d9,%eax
-  10039c:	8b 45 08             	mov    0x8(%ebp),%eax
-  10039f:	6a 00                	push   $0x0
-  1003a1:	6a 00                	push   $0x0
-  1003a3:	6a 00                	push   $0x0
-  1003a5:	50                   	push   %eax
-  1003a6:	e8 9f 00 00 00       	call   10044a <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh>
-  1003ab:	83 c4 10             	add    $0x10,%esp
-  1003ae:	8b 45 08             	mov    0x8(%ebp),%eax
-  1003b1:	83 c0 08             	add    $0x8,%eax
-  1003b4:	6a 00                	push   $0x0
-  1003b6:	6a 00                	push   $0x0
-  1003b8:	6a 00                	push   $0x0
-  1003ba:	50                   	push   %eax
-  1003bb:	e8 8a 00 00 00       	call   10044a <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh>
-  1003c0:	83 c4 10             	add    $0x10,%esp
-  1003c3:	8b 45 08             	mov    0x8(%ebp),%eax
-  1003c6:	83 c0 10             	add    $0x10,%eax
-  1003c9:	68 9a 00 00 00       	push   $0x9a
-  1003ce:	68 00 00 00 04       	push   $0x4000000
-  1003d3:	6a 00                	push   $0x0
-  1003d5:	50                   	push   %eax
-  1003d6:	e8 6f 00 00 00       	call   10044a <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh>
-  1003db:	83 c4 10             	add    $0x10,%esp
-  1003de:	8b 45 08             	mov    0x8(%ebp),%eax
-  1003e1:	83 c0 18             	add    $0x18,%eax
-  1003e4:	68 92 00 00 00       	push   $0x92
-  1003e9:	68 00 00 00 04       	push   $0x4000000
-  1003ee:	6a 00                	push   $0x0
-  1003f0:	50                   	push   %eax
-  1003f1:	e8 54 00 00 00       	call   10044a <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh>
-  1003f6:	83 c4 10             	add    $0x10,%esp
-  1003f9:	8b 45 08             	mov    0x8(%ebp),%eax
-  1003fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
-  1003ff:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
-  100406:	8d 45 f0             	lea    -0x10(%ebp),%eax
-  100409:	83 c0 02             	add    $0x2,%eax
-  10040c:	0f 01 10             	lgdtl  (%eax)
-  10040f:	90                   	nop
-  100410:	c9                   	leave  
-  100411:	c3                   	ret    
-
-00100412 <_ZN21GlobalDescriptorTableD1Ev>:
-  100412:	55                   	push   %ebp
-  100413:	89 e5                	mov    %esp,%ebp
-  100415:	e8 69 ff ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10041a:	05 56 19 00 00       	add    $0x1956,%eax
-  10041f:	90                   	nop
-  100420:	5d                   	pop    %ebp
-  100421:	c3                   	ret    
-
-00100422 <_ZN21GlobalDescriptorTable19DataSegmentSelectorEv>:
-  100422:	55                   	push   %ebp
-  100423:	89 e5                	mov    %esp,%ebp
-  100425:	e8 59 ff ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10042a:	05 46 19 00 00       	add    $0x1946,%eax
-  10042f:	b8 18 00 00 00       	mov    $0x18,%eax
-  100434:	5d                   	pop    %ebp
-  100435:	c3                   	ret    
-
-00100436 <_ZN21GlobalDescriptorTable19CodeSegmentSelectorEv>:
-  100436:	55                   	push   %ebp
-  100437:	89 e5                	mov    %esp,%ebp
-  100439:	e8 45 ff ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10043e:	05 32 19 00 00       	add    $0x1932,%eax
-  100443:	b8 10 00 00 00       	mov    $0x10,%eax
-  100448:	5d                   	pop    %ebp
-  100449:	c3                   	ret    
-
-0010044a <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh>:
-  10044a:	55                   	push   %ebp
-  10044b:	89 e5                	mov    %esp,%ebp
-  10044d:	83 ec 14             	sub    $0x14,%esp
-  100450:	e8 2e ff ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100455:	05 1b 19 00 00       	add    $0x191b,%eax
-  10045a:	8b 45 14             	mov    0x14(%ebp),%eax
-  10045d:	88 45 ec             	mov    %al,-0x14(%ebp)
-  100460:	8b 45 08             	mov    0x8(%ebp),%eax
-  100463:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  100466:	81 7d 10 00 00 01 00 	cmpl   $0x10000,0x10(%ebp)
-  10046d:	77 0b                	ja     10047a <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh+0x30>
-  10046f:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  100472:	83 c0 06             	add    $0x6,%eax
-  100475:	c6 00 40             	movb   $0x40,(%eax)
-  100478:	eb 2a                	jmp    1004a4 <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh+0x5a>
-  10047a:	8b 45 10             	mov    0x10(%ebp),%eax
-  10047d:	25 ff 0f 00 00       	and    $0xfff,%eax
-  100482:	3d ff 0f 00 00       	cmp    $0xfff,%eax
-  100487:	74 0e                	je     100497 <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh+0x4d>
-  100489:	8b 45 10             	mov    0x10(%ebp),%eax
-  10048c:	c1 e8 0c             	shr    $0xc,%eax
-  10048f:	83 e8 01             	sub    $0x1,%eax
-  100492:	89 45 10             	mov    %eax,0x10(%ebp)
-  100495:	eb 04                	jmp    10049b <_ZN21GlobalDescriptorTable17SegmentDescriptorC1Ejjh+0x51>
-  100497:	c1 6d 10 0c          	shrl   $0xc,0x10(%ebp)
-  10049b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  10049e:	83 c0 06             	add    $0x6,%eax
-  1004a1:	c6 00 c0             	movb   $0xc0,(%eax)
-  1004a4:	8b 45 10             	mov    0x10(%ebp),%eax
-  1004a7:	89 c2                	mov    %eax,%edx
-  1004a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1004ac:	88 10                	mov    %dl,(%eax)
-  1004ae:	8b 45 10             	mov    0x10(%ebp),%eax
-  1004b1:	c1 e8 08             	shr    $0x8,%eax
-  1004b4:	89 c2                	mov    %eax,%edx
-  1004b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1004b9:	83 c0 01             	add    $0x1,%eax
-  1004bc:	88 10                	mov    %dl,(%eax)
-  1004be:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1004c1:	83 c0 06             	add    $0x6,%eax
-  1004c4:	0f b6 10             	movzbl (%eax),%edx
-  1004c7:	8b 45 10             	mov    0x10(%ebp),%eax
-  1004ca:	c1 e8 10             	shr    $0x10,%eax
-  1004cd:	83 e0 0f             	and    $0xf,%eax
-  1004d0:	89 c1                	mov    %eax,%ecx
-  1004d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1004d5:	83 c0 06             	add    $0x6,%eax
-  1004d8:	09 ca                	or     %ecx,%edx
-  1004da:	88 10                	mov    %dl,(%eax)
-  1004dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1004df:	83 c0 02             	add    $0x2,%eax
-  1004e2:	8b 55 0c             	mov    0xc(%ebp),%edx
-  1004e5:	88 10                	mov    %dl,(%eax)
-  1004e7:	8b 45 0c             	mov    0xc(%ebp),%eax
-  1004ea:	c1 e8 08             	shr    $0x8,%eax
-  1004ed:	89 c2                	mov    %eax,%edx
-  1004ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1004f2:	83 c0 03             	add    $0x3,%eax
-  1004f5:	88 10                	mov    %dl,(%eax)
-  1004f7:	8b 45 0c             	mov    0xc(%ebp),%eax
-  1004fa:	c1 e8 10             	shr    $0x10,%eax
-  1004fd:	89 c2                	mov    %eax,%edx
-  1004ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  100502:	83 c0 04             	add    $0x4,%eax
-  100505:	88 10                	mov    %dl,(%eax)
-  100507:	8b 45 0c             	mov    0xc(%ebp),%eax
-  10050a:	c1 e8 18             	shr    $0x18,%eax
-  10050d:	89 c2                	mov    %eax,%edx
-  10050f:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  100512:	83 c0 07             	add    $0x7,%eax
-  100515:	88 10                	mov    %dl,(%eax)
-  100517:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  10051a:	8d 50 05             	lea    0x5(%eax),%edx
-  10051d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
-  100521:	88 02                	mov    %al,(%edx)
-  100523:	90                   	nop
-  100524:	c9                   	leave  
-  100525:	c3                   	ret    
-
-00100526 <_ZN21GlobalDescriptorTable17SegmentDescriptor4BaseEv>:
-  100526:	55                   	push   %ebp
-  100527:	89 e5                	mov    %esp,%ebp
-  100529:	83 ec 10             	sub    $0x10,%esp
-  10052c:	e8 52 fe ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100531:	05 3f 18 00 00       	add    $0x183f,%eax
-  100536:	8b 45 08             	mov    0x8(%ebp),%eax
-  100539:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  10053c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  10053f:	83 c0 07             	add    $0x7,%eax
-  100542:	0f b6 00             	movzbl (%eax),%eax
-  100545:	0f b6 c0             	movzbl %al,%eax
-  100548:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  10054b:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  10054e:	c1 e0 08             	shl    $0x8,%eax
-  100551:	89 c2                	mov    %eax,%edx
-  100553:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  100556:	83 c0 04             	add    $0x4,%eax
-  100559:	0f b6 00             	movzbl (%eax),%eax
-  10055c:	0f b6 c0             	movzbl %al,%eax
-  10055f:	01 d0                	add    %edx,%eax
-  100561:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  100564:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  100567:	c1 e0 08             	shl    $0x8,%eax
-  10056a:	89 c2                	mov    %eax,%edx
-  10056c:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  10056f:	83 c0 03             	add    $0x3,%eax
-  100572:	0f b6 00             	movzbl (%eax),%eax
-  100575:	0f b6 c0             	movzbl %al,%eax
-  100578:	01 d0                	add    %edx,%eax
-  10057a:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  10057d:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  100580:	c1 e0 08             	shl    $0x8,%eax
-  100583:	89 c2                	mov    %eax,%edx
-  100585:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  100588:	83 c0 02             	add    $0x2,%eax
-  10058b:	0f b6 00             	movzbl (%eax),%eax
-  10058e:	0f b6 c0             	movzbl %al,%eax
-  100591:	01 d0                	add    %edx,%eax
-  100593:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  100596:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  100599:	c9                   	leave  
-  10059a:	c3                   	ret    
-  10059b:	90                   	nop
-
-0010059c <_ZN21GlobalDescriptorTable17SegmentDescriptor5LimitEv>:
-  10059c:	55                   	push   %ebp
-  10059d:	89 e5                	mov    %esp,%ebp
-  10059f:	83 ec 10             	sub    $0x10,%esp
-  1005a2:	e8 dc fd ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1005a7:	05 c9 17 00 00       	add    $0x17c9,%eax
-  1005ac:	8b 45 08             	mov    0x8(%ebp),%eax
-  1005af:	89 45 f8             	mov    %eax,-0x8(%ebp)
-  1005b2:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  1005b5:	83 c0 06             	add    $0x6,%eax
-  1005b8:	0f b6 00             	movzbl (%eax),%eax
-  1005bb:	0f b6 c0             	movzbl %al,%eax
-  1005be:	83 e0 0f             	and    $0xf,%eax
-  1005c1:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  1005c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1005c7:	c1 e0 08             	shl    $0x8,%eax
-  1005ca:	89 c2                	mov    %eax,%edx
-  1005cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  1005cf:	83 c0 01             	add    $0x1,%eax
-  1005d2:	0f b6 00             	movzbl (%eax),%eax
-  1005d5:	0f b6 c0             	movzbl %al,%eax
-  1005d8:	01 d0                	add    %edx,%eax
-  1005da:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  1005dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  1005e0:	c1 e0 08             	shl    $0x8,%eax
-  1005e3:	89 c2                	mov    %eax,%edx
-  1005e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  1005e8:	0f b6 00             	movzbl (%eax),%eax
-  1005eb:	0f b6 c0             	movzbl %al,%eax
-  1005ee:	01 d0                	add    %edx,%eax
-  1005f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  1005f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
-  1005f6:	83 c0 06             	add    $0x6,%eax
-  1005f9:	0f b6 00             	movzbl (%eax),%eax
-  1005fc:	0f b6 c0             	movzbl %al,%eax
-  1005ff:	25 c0 00 00 00       	and    $0xc0,%eax
-  100604:	3d c0 00 00 00       	cmp    $0xc0,%eax
-  100609:	75 0e                	jne    100619 <_ZN21GlobalDescriptorTable17SegmentDescriptor5LimitEv+0x7d>
-  10060b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  10060e:	c1 e0 0c             	shl    $0xc,%eax
-  100611:	0d ff 0f 00 00       	or     $0xfff,%eax
-  100616:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  100619:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  10061c:	c9                   	leave  
-  10061d:	c3                   	ret    
-
-0010061e <_ZdlPvj>:
-  10061e:	55                   	push   %ebp
-  10061f:	89 e5                	mov    %esp,%ebp
-  100621:	e8 5d fd ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100626:	05 4a 17 00 00       	add    $0x174a,%eax
-  10062b:	90                   	nop
-  10062c:	5d                   	pop    %ebp
-  10062d:	c3                   	ret    
-
-0010062e <_ZdlPv>:
-  10062e:	55                   	push   %ebp
-  10062f:	89 e5                	mov    %esp,%ebp
-  100631:	e8 4d fd ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100636:	05 3a 17 00 00       	add    $0x173a,%eax
-  10063b:	90                   	nop
-  10063c:	5d                   	pop    %ebp
-  10063d:	c3                   	ret    
-
-0010063e <_ZN4PortC1Et>:
-  10063e:	55                   	push   %ebp
-  10063f:	89 e5                	mov    %esp,%ebp
-  100641:	83 ec 04             	sub    $0x4,%esp
-  100644:	e8 3a fd ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100649:	05 27 17 00 00       	add    $0x1727,%eax
-  10064e:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100651:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  100655:	8b 45 08             	mov    0x8(%ebp),%eax
-  100658:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
-  10065c:	66 89 10             	mov    %dx,(%eax)
-  10065f:	90                   	nop
-  100660:	c9                   	leave  
-  100661:	c3                   	ret    
-
-00100662 <_ZN4PortD1Ev>:
-  100662:	55                   	push   %ebp
-  100663:	89 e5                	mov    %esp,%ebp
-  100665:	e8 19 fd ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10066a:	05 06 17 00 00       	add    $0x1706,%eax
-  10066f:	90                   	nop
-  100670:	5d                   	pop    %ebp
-  100671:	c3                   	ret    
-
-00100672 <_ZN8Port8BitC1Et>:
-  100672:	55                   	push   %ebp
-  100673:	89 e5                	mov    %esp,%ebp
-  100675:	53                   	push   %ebx
-  100676:	83 ec 04             	sub    $0x4,%esp
-  100679:	e8 09 fd ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  10067e:	81 c3 f2 16 00 00    	add    $0x16f2,%ebx
-  100684:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100687:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
-  10068b:	8b 45 08             	mov    0x8(%ebp),%eax
-  10068e:	8d 50 04             	lea    0x4(%eax),%edx
-  100691:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
-  100695:	50                   	push   %eax
-  100696:	52                   	push   %edx
-  100697:	e8 a2 ff ff ff       	call   10063e <_ZN4PortC1Et>
-  10069c:	83 c4 08             	add    $0x8,%esp
-  10069f:	8d 93 40 00 00 00    	lea    0x40(%ebx),%edx
-  1006a5:	8b 45 08             	mov    0x8(%ebp),%eax
-  1006a8:	89 10                	mov    %edx,(%eax)
-  1006aa:	90                   	nop
-  1006ab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1006ae:	c9                   	leave  
-  1006af:	c3                   	ret    
-
-001006b0 <_ZN8Port8BitD1Ev>:
-  1006b0:	55                   	push   %ebp
-  1006b1:	89 e5                	mov    %esp,%ebp
-  1006b3:	e8 cb fc ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1006b8:	05 b8 16 00 00       	add    $0x16b8,%eax
-  1006bd:	8d 90 40 00 00 00    	lea    0x40(%eax),%edx
-  1006c3:	8b 45 08             	mov    0x8(%ebp),%eax
-  1006c6:	89 10                	mov    %edx,(%eax)
-  1006c8:	8b 45 08             	mov    0x8(%ebp),%eax
-  1006cb:	83 c0 04             	add    $0x4,%eax
-  1006ce:	50                   	push   %eax
-  1006cf:	e8 8e ff ff ff       	call   100662 <_ZN4PortD1Ev>
-  1006d4:	83 c4 04             	add    $0x4,%esp
-  1006d7:	90                   	nop
-  1006d8:	c9                   	leave  
-  1006d9:	c3                   	ret    
-
-001006da <_ZN8Port8Bit5WriteEh>:
-  1006da:	55                   	push   %ebp
-  1006db:	89 e5                	mov    %esp,%ebp
-  1006dd:	83 ec 04             	sub    $0x4,%esp
-  1006e0:	e8 9e fc ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1006e5:	05 8b 16 00 00       	add    $0x168b,%eax
-  1006ea:	8b 45 0c             	mov    0xc(%ebp),%eax
-  1006ed:	88 45 fc             	mov    %al,-0x4(%ebp)
-  1006f0:	8b 45 08             	mov    0x8(%ebp),%eax
-  1006f3:	0f b7 50 04          	movzwl 0x4(%eax),%edx
-  1006f7:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
-  1006fb:	ee                   	out    %al,(%dx)
-  1006fc:	90                   	nop
-  1006fd:	c9                   	leave  
-  1006fe:	c3                   	ret    
-  1006ff:	90                   	nop
-
-00100700 <_ZN8Port8Bit4ReadEv>:
-  100700:	55                   	push   %ebp
-  100701:	89 e5                	mov    %esp,%ebp
-  100703:	83 ec 10             	sub    $0x10,%esp
-  100706:	e8 78 fc ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10070b:	05 65 16 00 00       	add    $0x1665,%eax
-  100710:	8b 45 08             	mov    0x8(%ebp),%eax
-  100713:	0f b7 40 04          	movzwl 0x4(%eax),%eax
-  100717:	89 c2                	mov    %eax,%edx
-  100719:	ec                   	in     (%dx),%al
-  10071a:	88 45 ff             	mov    %al,-0x1(%ebp)
-  10071d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
-  100721:	c9                   	leave  
-  100722:	c3                   	ret    
-  100723:	90                   	nop
-
-00100724 <_ZN9Port16BitC1Et>:
-  100724:	55                   	push   %ebp
-  100725:	89 e5                	mov    %esp,%ebp
-  100727:	53                   	push   %ebx
-  100728:	83 ec 04             	sub    $0x4,%esp
-  10072b:	e8 57 fc ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  100730:	81 c3 40 16 00 00    	add    $0x1640,%ebx
-  100736:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100739:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
-  10073d:	8b 45 08             	mov    0x8(%ebp),%eax
-  100740:	8d 50 04             	lea    0x4(%eax),%edx
-  100743:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
-  100747:	50                   	push   %eax
-  100748:	52                   	push   %edx
-  100749:	e8 f0 fe ff ff       	call   10063e <_ZN4PortC1Et>
-  10074e:	83 c4 08             	add    $0x8,%esp
-  100751:	8d 93 30 00 00 00    	lea    0x30(%ebx),%edx
-  100757:	8b 45 08             	mov    0x8(%ebp),%eax
-  10075a:	89 10                	mov    %edx,(%eax)
-  10075c:	90                   	nop
-  10075d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  100760:	c9                   	leave  
-  100761:	c3                   	ret    
-
-00100762 <_ZN9Port16BitD1Ev>:
-  100762:	55                   	push   %ebp
-  100763:	89 e5                	mov    %esp,%ebp
-  100765:	e8 19 fc ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10076a:	05 06 16 00 00       	add    $0x1606,%eax
-  10076f:	8d 90 30 00 00 00    	lea    0x30(%eax),%edx
-  100775:	8b 45 08             	mov    0x8(%ebp),%eax
-  100778:	89 10                	mov    %edx,(%eax)
-  10077a:	8b 45 08             	mov    0x8(%ebp),%eax
-  10077d:	83 c0 04             	add    $0x4,%eax
-  100780:	50                   	push   %eax
-  100781:	e8 dc fe ff ff       	call   100662 <_ZN4PortD1Ev>
-  100786:	83 c4 04             	add    $0x4,%esp
-  100789:	90                   	nop
-  10078a:	c9                   	leave  
-  10078b:	c3                   	ret    
-
-0010078c <_ZN9Port16Bit5WriteEt>:
-  10078c:	55                   	push   %ebp
-  10078d:	89 e5                	mov    %esp,%ebp
-  10078f:	83 ec 04             	sub    $0x4,%esp
-  100792:	e8 ec fb ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100797:	05 d9 15 00 00       	add    $0x15d9,%eax
-  10079c:	8b 45 0c             	mov    0xc(%ebp),%eax
-  10079f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  1007a3:	8b 45 08             	mov    0x8(%ebp),%eax
-  1007a6:	0f b7 50 04          	movzwl 0x4(%eax),%edx
-  1007aa:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
-  1007ae:	66 ef                	out    %ax,(%dx)
-  1007b0:	90                   	nop
-  1007b1:	c9                   	leave  
-  1007b2:	c3                   	ret    
-  1007b3:	90                   	nop
-
-001007b4 <_ZN9Port16Bit4ReadEv>:
-  1007b4:	55                   	push   %ebp
-  1007b5:	89 e5                	mov    %esp,%ebp
-  1007b7:	83 ec 10             	sub    $0x10,%esp
-  1007ba:	e8 c4 fb ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1007bf:	05 b1 15 00 00       	add    $0x15b1,%eax
-  1007c4:	8b 45 08             	mov    0x8(%ebp),%eax
-  1007c7:	0f b7 40 04          	movzwl 0x4(%eax),%eax
-  1007cb:	89 c2                	mov    %eax,%edx
-  1007cd:	66 ed                	in     (%dx),%ax
-  1007cf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
-  1007d3:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
-  1007d7:	c9                   	leave  
-  1007d8:	c3                   	ret    
-  1007d9:	90                   	nop
-
-001007da <_ZN9Port32BitC1Et>:
-  1007da:	55                   	push   %ebp
-  1007db:	89 e5                	mov    %esp,%ebp
-  1007dd:	53                   	push   %ebx
-  1007de:	83 ec 04             	sub    $0x4,%esp
-  1007e1:	e8 a1 fb ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  1007e6:	81 c3 8a 15 00 00    	add    $0x158a,%ebx
-  1007ec:	8b 45 0c             	mov    0xc(%ebp),%eax
-  1007ef:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
-  1007f3:	8b 45 08             	mov    0x8(%ebp),%eax
-  1007f6:	8d 50 04             	lea    0x4(%eax),%edx
-  1007f9:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
-  1007fd:	50                   	push   %eax
-  1007fe:	52                   	push   %edx
-  1007ff:	e8 3a fe ff ff       	call   10063e <_ZN4PortC1Et>
-  100804:	83 c4 08             	add    $0x8,%esp
-  100807:	8d 93 20 00 00 00    	lea    0x20(%ebx),%edx
-  10080d:	8b 45 08             	mov    0x8(%ebp),%eax
-  100810:	89 10                	mov    %edx,(%eax)
-  100812:	90                   	nop
-  100813:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  100816:	c9                   	leave  
-  100817:	c3                   	ret    
-
-00100818 <_ZN9Port32BitD1Ev>:
-  100818:	55                   	push   %ebp
-  100819:	89 e5                	mov    %esp,%ebp
-  10081b:	e8 63 fb ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100820:	05 50 15 00 00       	add    $0x1550,%eax
-  100825:	8d 90 20 00 00 00    	lea    0x20(%eax),%edx
-  10082b:	8b 45 08             	mov    0x8(%ebp),%eax
-  10082e:	89 10                	mov    %edx,(%eax)
-  100830:	8b 45 08             	mov    0x8(%ebp),%eax
-  100833:	83 c0 04             	add    $0x4,%eax
-  100836:	50                   	push   %eax
-  100837:	e8 26 fe ff ff       	call   100662 <_ZN4PortD1Ev>
-  10083c:	83 c4 04             	add    $0x4,%esp
-  10083f:	90                   	nop
-  100840:	c9                   	leave  
-  100841:	c3                   	ret    
-
-00100842 <_ZN9Port32Bit5WriteEj>:
-  100842:	55                   	push   %ebp
-  100843:	89 e5                	mov    %esp,%ebp
-  100845:	e8 39 fb ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10084a:	05 26 15 00 00       	add    $0x1526,%eax
-  10084f:	8b 45 08             	mov    0x8(%ebp),%eax
-  100852:	0f b7 50 04          	movzwl 0x4(%eax),%edx
-  100856:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100859:	ef                   	out    %eax,(%dx)
-  10085a:	90                   	nop
-  10085b:	5d                   	pop    %ebp
-  10085c:	c3                   	ret    
-  10085d:	90                   	nop
-
-0010085e <_ZN9Port32Bit4ReadEv>:
-  10085e:	55                   	push   %ebp
-  10085f:	89 e5                	mov    %esp,%ebp
-  100861:	83 ec 10             	sub    $0x10,%esp
-  100864:	e8 1a fb ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100869:	05 07 15 00 00       	add    $0x1507,%eax
-  10086e:	8b 45 08             	mov    0x8(%ebp),%eax
-  100871:	0f b7 40 04          	movzwl 0x4(%eax),%eax
-  100875:	89 c2                	mov    %eax,%edx
-  100877:	ed                   	in     (%dx),%eax
-  100878:	89 45 fc             	mov    %eax,-0x4(%ebp)
-  10087b:	8b 45 fc             	mov    -0x4(%ebp),%eax
-  10087e:	c9                   	leave  
-  10087f:	c3                   	ret    
-
-00100880 <_ZN12Port8BitSlowC1Et>:
-  100880:	55                   	push   %ebp
-  100881:	89 e5                	mov    %esp,%ebp
-  100883:	53                   	push   %ebx
-  100884:	83 ec 04             	sub    $0x4,%esp
-  100887:	e8 fb fa ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  10088c:	81 c3 e4 14 00 00    	add    $0x14e4,%ebx
-  100892:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100895:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
-  100899:	8b 45 08             	mov    0x8(%ebp),%eax
-  10089c:	8d 50 04             	lea    0x4(%eax),%edx
-  10089f:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
-  1008a3:	50                   	push   %eax
-  1008a4:	52                   	push   %edx
-  1008a5:	e8 94 fd ff ff       	call   10063e <_ZN4PortC1Et>
-  1008aa:	83 c4 08             	add    $0x8,%esp
-  1008ad:	8d 93 14 00 00 00    	lea    0x14(%ebx),%edx
-  1008b3:	8b 45 08             	mov    0x8(%ebp),%eax
-  1008b6:	89 10                	mov    %edx,(%eax)
-  1008b8:	90                   	nop
-  1008b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1008bc:	c9                   	leave  
-  1008bd:	c3                   	ret    
-
-001008be <_ZN12Port8BitSlowD1Ev>:
-  1008be:	55                   	push   %ebp
-  1008bf:	89 e5                	mov    %esp,%ebp
-  1008c1:	e8 bd fa ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1008c6:	05 aa 14 00 00       	add    $0x14aa,%eax
-  1008cb:	8d 90 14 00 00 00    	lea    0x14(%eax),%edx
-  1008d1:	8b 45 08             	mov    0x8(%ebp),%eax
-  1008d4:	89 10                	mov    %edx,(%eax)
-  1008d6:	8b 45 08             	mov    0x8(%ebp),%eax
-  1008d9:	83 c0 04             	add    $0x4,%eax
-  1008dc:	50                   	push   %eax
-  1008dd:	e8 80 fd ff ff       	call   100662 <_ZN4PortD1Ev>
-  1008e2:	83 c4 04             	add    $0x4,%esp
-  1008e5:	90                   	nop
-  1008e6:	c9                   	leave  
-  1008e7:	c3                   	ret    
-
-001008e8 <_ZN12Port8BitSlow5WriteEh>:
-  1008e8:	55                   	push   %ebp
-  1008e9:	89 e5                	mov    %esp,%ebp
-  1008eb:	83 ec 04             	sub    $0x4,%esp
-  1008ee:	e8 90 fa ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1008f3:	05 7d 14 00 00       	add    $0x147d,%eax
-  1008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
-  1008fb:	88 45 fc             	mov    %al,-0x4(%ebp)
-  1008fe:	8b 45 08             	mov    0x8(%ebp),%eax
-  100901:	0f b7 50 04          	movzwl 0x4(%eax),%edx
-  100905:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
-  100909:	ee                   	out    %al,(%dx)
-  10090a:	eb 00                	jmp    10090c <_ZN12Port8BitSlow5WriteEh+0x24>
-  10090c:	eb 00                	jmp    10090e <_ZN12Port8BitSlow5WriteEh+0x26>
-  10090e:	90                   	nop
-  10090f:	c9                   	leave  
-  100910:	c3                   	ret    
-
-00100911 <_ZN16InterruptManager19HandleException0x00Ev>:
-  100911:	c6 05 6c 1d 10 00 00 	movb   $0x0,0x101d6c
-  100918:	e9 83 01 00 00       	jmp    100aa0 <int_bottom>
-
-0010091d <_ZN16InterruptManager19HandleException0x01Ev>:
-  10091d:	c6 05 6c 1d 10 00 01 	movb   $0x1,0x101d6c
-  100924:	e9 77 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100929 <_ZN16InterruptManager19HandleException0x02Ev>:
-  100929:	c6 05 6c 1d 10 00 02 	movb   $0x2,0x101d6c
-  100930:	e9 6b 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100935 <_ZN16InterruptManager19HandleException0x03Ev>:
-  100935:	c6 05 6c 1d 10 00 03 	movb   $0x3,0x101d6c
-  10093c:	e9 5f 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100941 <_ZN16InterruptManager19HandleException0x04Ev>:
-  100941:	c6 05 6c 1d 10 00 04 	movb   $0x4,0x101d6c
-  100948:	e9 53 01 00 00       	jmp    100aa0 <int_bottom>
-
-0010094d <_ZN16InterruptManager19HandleException0x05Ev>:
-  10094d:	c6 05 6c 1d 10 00 05 	movb   $0x5,0x101d6c
-  100954:	e9 47 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100959 <_ZN16InterruptManager19HandleException0x06Ev>:
-  100959:	c6 05 6c 1d 10 00 06 	movb   $0x6,0x101d6c
-  100960:	e9 3b 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100965 <_ZN16InterruptManager19HandleException0x07Ev>:
-  100965:	c6 05 6c 1d 10 00 07 	movb   $0x7,0x101d6c
-  10096c:	e9 2f 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100971 <_ZN16InterruptManager19HandleException0x08Ev>:
-  100971:	c6 05 6c 1d 10 00 08 	movb   $0x8,0x101d6c
-  100978:	e9 23 01 00 00       	jmp    100aa0 <int_bottom>
-
-0010097d <_ZN16InterruptManager19HandleException0x09Ev>:
-  10097d:	c6 05 6c 1d 10 00 09 	movb   $0x9,0x101d6c
-  100984:	e9 17 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100989 <_ZN16InterruptManager19HandleException0x0AEv>:
-  100989:	c6 05 6c 1d 10 00 0a 	movb   $0xa,0x101d6c
-  100990:	e9 0b 01 00 00       	jmp    100aa0 <int_bottom>
-
-00100995 <_ZN16InterruptManager19HandleException0x0BEv>:
-  100995:	c6 05 6c 1d 10 00 0b 	movb   $0xb,0x101d6c
-  10099c:	e9 ff 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009a1 <_ZN16InterruptManager19HandleException0x0CEv>:
-  1009a1:	c6 05 6c 1d 10 00 0c 	movb   $0xc,0x101d6c
-  1009a8:	e9 f3 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009ad <_ZN16InterruptManager19HandleException0x0DEv>:
-  1009ad:	c6 05 6c 1d 10 00 0d 	movb   $0xd,0x101d6c
-  1009b4:	e9 e7 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009b9 <_ZN16InterruptManager19HandleException0x0EEv>:
-  1009b9:	c6 05 6c 1d 10 00 0e 	movb   $0xe,0x101d6c
-  1009c0:	e9 db 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009c5 <_ZN16InterruptManager19HandleException0x0FEv>:
-  1009c5:	c6 05 6c 1d 10 00 0f 	movb   $0xf,0x101d6c
-  1009cc:	e9 cf 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009d1 <_ZN16InterruptManager19HandleException0x10Ev>:
-  1009d1:	c6 05 6c 1d 10 00 10 	movb   $0x10,0x101d6c
-  1009d8:	e9 c3 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009dd <_ZN16InterruptManager19HandleException0x11Ev>:
-  1009dd:	c6 05 6c 1d 10 00 11 	movb   $0x11,0x101d6c
-  1009e4:	e9 b7 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009e9 <_ZN16InterruptManager19HandleException0x12Ev>:
-  1009e9:	c6 05 6c 1d 10 00 12 	movb   $0x12,0x101d6c
-  1009f0:	e9 ab 00 00 00       	jmp    100aa0 <int_bottom>
-
-001009f5 <_ZN16InterruptManager19HandleException0x13Ev>:
-  1009f5:	c6 05 6c 1d 10 00 13 	movb   $0x13,0x101d6c
-  1009fc:	e9 9f 00 00 00       	jmp    100aa0 <int_bottom>
-
-00100a01 <_ZN16InterruptManager26HandleInterruptRequest0x00Ev>:
-  100a01:	c6 05 6c 1d 10 00 20 	movb   $0x20,0x101d6c
-  100a08:	e9 93 00 00 00       	jmp    100aa0 <int_bottom>
-
-00100a0d <_ZN16InterruptManager26HandleInterruptRequest0x01Ev>:
-  100a0d:	c6 05 6c 1d 10 00 21 	movb   $0x21,0x101d6c
-  100a14:	e9 87 00 00 00       	jmp    100aa0 <int_bottom>
-
-00100a19 <_ZN16InterruptManager26HandleInterruptRequest0x02Ev>:
-  100a19:	c6 05 6c 1d 10 00 22 	movb   $0x22,0x101d6c
-  100a20:	eb 7e                	jmp    100aa0 <int_bottom>
-
-00100a22 <_ZN16InterruptManager26HandleInterruptRequest0x03Ev>:
-  100a22:	c6 05 6c 1d 10 00 23 	movb   $0x23,0x101d6c
-  100a29:	eb 75                	jmp    100aa0 <int_bottom>
-
-00100a2b <_ZN16InterruptManager26HandleInterruptRequest0x04Ev>:
-  100a2b:	c6 05 6c 1d 10 00 24 	movb   $0x24,0x101d6c
-  100a32:	eb 6c                	jmp    100aa0 <int_bottom>
-
-00100a34 <_ZN16InterruptManager26HandleInterruptRequest0x05Ev>:
-  100a34:	c6 05 6c 1d 10 00 25 	movb   $0x25,0x101d6c
-  100a3b:	eb 63                	jmp    100aa0 <int_bottom>
-
-00100a3d <_ZN16InterruptManager26HandleInterruptRequest0x06Ev>:
-  100a3d:	c6 05 6c 1d 10 00 26 	movb   $0x26,0x101d6c
-  100a44:	eb 5a                	jmp    100aa0 <int_bottom>
-
-00100a46 <_ZN16InterruptManager26HandleInterruptRequest0x07Ev>:
-  100a46:	c6 05 6c 1d 10 00 27 	movb   $0x27,0x101d6c
-  100a4d:	eb 51                	jmp    100aa0 <int_bottom>
-
-00100a4f <_ZN16InterruptManager26HandleInterruptRequest0x08Ev>:
-  100a4f:	c6 05 6c 1d 10 00 28 	movb   $0x28,0x101d6c
-  100a56:	eb 48                	jmp    100aa0 <int_bottom>
-
-00100a58 <_ZN16InterruptManager26HandleInterruptRequest0x09Ev>:
-  100a58:	c6 05 6c 1d 10 00 29 	movb   $0x29,0x101d6c
-  100a5f:	eb 3f                	jmp    100aa0 <int_bottom>
-
-00100a61 <_ZN16InterruptManager26HandleInterruptRequest0x0AEv>:
-  100a61:	c6 05 6c 1d 10 00 2a 	movb   $0x2a,0x101d6c
-  100a68:	eb 36                	jmp    100aa0 <int_bottom>
-
-00100a6a <_ZN16InterruptManager26HandleInterruptRequest0x0BEv>:
-  100a6a:	c6 05 6c 1d 10 00 2b 	movb   $0x2b,0x101d6c
-  100a71:	eb 2d                	jmp    100aa0 <int_bottom>
-
-00100a73 <_ZN16InterruptManager26HandleInterruptRequest0x0CEv>:
-  100a73:	c6 05 6c 1d 10 00 2c 	movb   $0x2c,0x101d6c
-  100a7a:	eb 24                	jmp    100aa0 <int_bottom>
-
-00100a7c <_ZN16InterruptManager26HandleInterruptRequest0x0DEv>:
-  100a7c:	c6 05 6c 1d 10 00 2d 	movb   $0x2d,0x101d6c
-  100a83:	eb 1b                	jmp    100aa0 <int_bottom>
-
-00100a85 <_ZN16InterruptManager26HandleInterruptRequest0x0EEv>:
-  100a85:	c6 05 6c 1d 10 00 2e 	movb   $0x2e,0x101d6c
-  100a8c:	eb 12                	jmp    100aa0 <int_bottom>
-
-00100a8e <_ZN16InterruptManager26HandleInterruptRequest0x0FEv>:
-  100a8e:	c6 05 6c 1d 10 00 2f 	movb   $0x2f,0x101d6c
-  100a95:	eb 09                	jmp    100aa0 <int_bottom>
-
-00100a97 <_ZN16InterruptManager26HandleInterruptRequest0x31Ev>:
-  100a97:	c6 05 6c 1d 10 00 51 	movb   $0x51,0x101d6c
-  100a9e:	eb 00                	jmp    100aa0 <int_bottom>
-
-00100aa0 <int_bottom>:
-  100aa0:	60                   	pusha  
-  100aa1:	1e                   	push   %ds
-  100aa2:	06                   	push   %es
-  100aa3:	0f a0                	push   %fs
-  100aa5:	0f a8                	push   %gs
-  100aa7:	54                   	push   %esp
-  100aa8:	ff 35 6c 1d 10 00    	push   0x101d6c
-  100aae:	e8 2f 09 00 00       	call   1013e2 <_ZN16InterruptManager15HandleInterruptEhj>
-  100ab3:	01 25 06 00 00 00    	add    %esp,0x6
-  100ab9:	89 c4                	mov    %eax,%esp
-  100abb:	0f a9                	pop    %gs
-  100abd:	0f a1                	pop    %fs
-  100abf:	07                   	pop    %es
-  100ac0:	1f                   	pop    %ds
-  100ac1:	61                   	popa   
-
-00100ac2 <_ZN16InterruptManager15InterruptIgnoreEv>:
-  100ac2:	cf                   	iret   
-  100ac3:	90                   	nop
-
-00100ac4 <_ZN16InterruptHandlerC1EP16InterruptManagerh>:
-  100ac4:	55                   	push   %ebp
-  100ac5:	89 e5                	mov    %esp,%ebp
-  100ac7:	83 ec 04             	sub    $0x4,%esp
-  100aca:	e8 b4 f8 ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100acf:	05 a1 12 00 00       	add    $0x12a1,%eax
-  100ad4:	8b 55 10             	mov    0x10(%ebp),%edx
-  100ad7:	88 55 fc             	mov    %dl,-0x4(%ebp)
-  100ada:	8d 90 50 00 00 00    	lea    0x50(%eax),%edx
-  100ae0:	8b 45 08             	mov    0x8(%ebp),%eax
-  100ae3:	89 10                	mov    %edx,(%eax)
-  100ae5:	8b 45 08             	mov    0x8(%ebp),%eax
-  100ae8:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
-  100aec:	88 50 04             	mov    %dl,0x4(%eax)
-  100aef:	8b 45 08             	mov    0x8(%ebp),%eax
-  100af2:	8b 55 0c             	mov    0xc(%ebp),%edx
-  100af5:	89 50 08             	mov    %edx,0x8(%eax)
-  100af8:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
-  100afc:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100aff:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  100b02:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
-  100b05:	90                   	nop
-  100b06:	c9                   	leave  
-  100b07:	c3                   	ret    
-
-00100b08 <_ZN16InterruptHandlerD1Ev>:
-  100b08:	55                   	push   %ebp
-  100b09:	89 e5                	mov    %esp,%ebp
-  100b0b:	e8 73 f8 ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100b10:	05 60 12 00 00       	add    $0x1260,%eax
-  100b15:	8d 90 50 00 00 00    	lea    0x50(%eax),%edx
-  100b1b:	8b 45 08             	mov    0x8(%ebp),%eax
-  100b1e:	89 10                	mov    %edx,(%eax)
-  100b20:	8b 45 08             	mov    0x8(%ebp),%eax
-  100b23:	8b 40 08             	mov    0x8(%eax),%eax
-  100b26:	8b 55 08             	mov    0x8(%ebp),%edx
-  100b29:	0f b6 52 04          	movzbl 0x4(%edx),%edx
-  100b2d:	0f b6 d2             	movzbl %dl,%edx
-  100b30:	8b 04 90             	mov    (%eax,%edx,4),%eax
-  100b33:	39 45 08             	cmp    %eax,0x8(%ebp)
-  100b36:	75 17                	jne    100b4f <_ZN16InterruptHandlerD1Ev+0x47>
-  100b38:	8b 45 08             	mov    0x8(%ebp),%eax
-  100b3b:	8b 40 08             	mov    0x8(%eax),%eax
-  100b3e:	8b 55 08             	mov    0x8(%ebp),%edx
-  100b41:	0f b6 52 04          	movzbl 0x4(%edx),%edx
-  100b45:	0f b6 d2             	movzbl %dl,%edx
-  100b48:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
-  100b4f:	90                   	nop
-  100b50:	5d                   	pop    %ebp
-  100b51:	c3                   	ret    
-
-00100b52 <_ZN16InterruptHandler15HandleInterruptEj>:
-  100b52:	55                   	push   %ebp
-  100b53:	89 e5                	mov    %esp,%ebp
-  100b55:	e8 29 f8 ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100b5a:	05 16 12 00 00       	add    $0x1216,%eax
-  100b5f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100b62:	5d                   	pop    %ebp
-  100b63:	c3                   	ret    
-
-00100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>:
-  100b64:	55                   	push   %ebp
-  100b65:	89 e5                	mov    %esp,%ebp
-  100b67:	57                   	push   %edi
-  100b68:	56                   	push   %esi
-  100b69:	53                   	push   %ebx
-  100b6a:	83 ec 20             	sub    $0x20,%esp
-  100b6d:	e8 11 f8 ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  100b72:	05 fe 11 00 00       	add    $0x11fe,%eax
-  100b77:	8b 75 08             	mov    0x8(%ebp),%esi
-  100b7a:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  100b7d:	8b 5d 14             	mov    0x14(%ebp),%ebx
-  100b80:	8b 4d 18             	mov    0x18(%ebp),%ecx
-  100b83:	89 f2                	mov    %esi,%edx
-  100b85:	88 55 e0             	mov    %dl,-0x20(%ebp)
-  100b88:	89 fa                	mov    %edi,%edx
-  100b8a:	66 89 55 dc          	mov    %dx,-0x24(%ebp)
-  100b8e:	89 da                	mov    %ebx,%edx
-  100b90:	88 55 d8             	mov    %dl,-0x28(%ebp)
-  100b93:	89 ca                	mov    %ecx,%edx
-  100b95:	88 55 d4             	mov    %dl,-0x2c(%ebp)
-  100b98:	8b 4d 10             	mov    0x10(%ebp),%ecx
-  100b9b:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
-  100b9f:	66 89 8c d0 90 00 20 	mov    %cx,0x200090(%eax,%edx,8)
-  100ba6:	00 
-  100ba7:	8b 55 10             	mov    0x10(%ebp),%edx
-  100baa:	89 d1                	mov    %edx,%ecx
-  100bac:	c1 e9 10             	shr    $0x10,%ecx
-  100baf:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
-  100bb3:	66 89 8c d0 96 00 20 	mov    %cx,0x200096(%eax,%edx,8)
-  100bba:	00 
-  100bbb:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
-  100bbf:	0f b7 4d dc          	movzwl -0x24(%ebp),%ecx
-  100bc3:	66 89 8c d0 92 00 20 	mov    %cx,0x200092(%eax,%edx,8)
-  100bca:	00 
-  100bcb:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
-  100bcf:	0f b6 55 d8          	movzbl -0x28(%ebp),%edx
-  100bd3:	c1 e2 05             	shl    $0x5,%edx
-  100bd6:	83 e2 60             	and    $0x60,%edx
-  100bd9:	89 d1                	mov    %edx,%ecx
-  100bdb:	0a 4d d4             	or     -0x2c(%ebp),%cl
-  100bde:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
-  100be2:	83 c9 80             	or     $0xffffff80,%ecx
-  100be5:	88 8c d0 95 00 20 00 	mov    %cl,0x200095(%eax,%edx,8)
-  100bec:	0f b6 55 e0          	movzbl -0x20(%ebp),%edx
-  100bf0:	c6 84 d0 94 00 20 00 	movb   $0x0,0x200094(%eax,%edx,8)
-  100bf7:	00 
-  100bf8:	90                   	nop
-  100bf9:	83 c4 20             	add    $0x20,%esp
-  100bfc:	5b                   	pop    %ebx
-  100bfd:	5e                   	pop    %esi
-  100bfe:	5f                   	pop    %edi
-  100bff:	5d                   	pop    %ebp
-  100c00:	c3                   	ret    
-  100c01:	90                   	nop
-
-00100c02 <_ZN16InterruptManagerC1EtP21GlobalDescriptorTable>:
-  100c02:	55                   	push   %ebp
-  100c03:	89 e5                	mov    %esp,%ebp
-  100c05:	53                   	push   %ebx
-  100c06:	83 ec 24             	sub    $0x24,%esp
-  100c09:	e8 79 f7 ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  100c0e:	81 c3 62 11 00 00    	add    $0x1162,%ebx
-  100c14:	8b 45 0c             	mov    0xc(%ebp),%eax
-  100c17:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
-  100c1b:	8b 45 08             	mov    0x8(%ebp),%eax
-  100c1e:	05 04 04 00 00       	add    $0x404,%eax
-  100c23:	83 ec 08             	sub    $0x8,%esp
-  100c26:	6a 20                	push   $0x20
-  100c28:	50                   	push   %eax
-  100c29:	e8 52 fc ff ff       	call   100880 <_ZN12Port8BitSlowC1Et>
-  100c2e:	83 c4 10             	add    $0x10,%esp
-  100c31:	8b 45 08             	mov    0x8(%ebp),%eax
-  100c34:	05 0c 04 00 00       	add    $0x40c,%eax
-  100c39:	83 ec 08             	sub    $0x8,%esp
-  100c3c:	6a 21                	push   $0x21
-  100c3e:	50                   	push   %eax
-  100c3f:	e8 3c fc ff ff       	call   100880 <_ZN12Port8BitSlowC1Et>
-  100c44:	83 c4 10             	add    $0x10,%esp
-  100c47:	8b 45 08             	mov    0x8(%ebp),%eax
-  100c4a:	05 14 04 00 00       	add    $0x414,%eax
-  100c4f:	83 ec 08             	sub    $0x8,%esp
-  100c52:	68 a0 00 00 00       	push   $0xa0
-  100c57:	50                   	push   %eax
-  100c58:	e8 23 fc ff ff       	call   100880 <_ZN12Port8BitSlowC1Et>
-  100c5d:	83 c4 10             	add    $0x10,%esp
-  100c60:	8b 45 08             	mov    0x8(%ebp),%eax
-  100c63:	05 1c 04 00 00       	add    $0x41c,%eax
-  100c68:	83 ec 08             	sub    $0x8,%esp
-  100c6b:	68 a1 00 00 00       	push   $0xa1
-  100c70:	50                   	push   %eax
-  100c71:	e8 0a fc ff ff       	call   100880 <_ZN12Port8BitSlowC1Et>
-  100c76:	83 c4 10             	add    $0x10,%esp
-  100c79:	8b 45 08             	mov    0x8(%ebp),%eax
-  100c7c:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
-  100c80:	66 89 90 00 04 00 00 	mov    %dx,0x400(%eax)
-  100c87:	83 ec 0c             	sub    $0xc,%esp
-  100c8a:	ff 75 10             	push   0x10(%ebp)
-  100c8d:	e8 a4 f7 ff ff       	call   100436 <_ZN21GlobalDescriptorTable19CodeSegmentSelectorEv>
-  100c92:	83 c4 10             	add    $0x10,%esp
-  100c95:	0f b7 c0             	movzwl %ax,%eax
-  100c98:	89 45 f0             	mov    %eax,-0x10(%ebp)
-  100c9b:	c6 45 ef 0e          	movb   $0xe,-0x11(%ebp)
-  100c9f:	c6 45 f7 ff          	movb   $0xff,-0x9(%ebp)
-  100ca3:	eb 34                	jmp    100cd9 <_ZN16InterruptManagerC1EtP21GlobalDescriptorTable+0xd7>
-  100ca5:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100ca8:	0f b7 d0             	movzwl %ax,%edx
-  100cab:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
-  100caf:	83 ec 0c             	sub    $0xc,%esp
-  100cb2:	6a 0e                	push   $0xe
-  100cb4:	6a 00                	push   $0x0
-  100cb6:	c7 c1 c2 0a 10 00    	mov    $0x100ac2,%ecx
-  100cbc:	51                   	push   %ecx
-  100cbd:	52                   	push   %edx
-  100cbe:	50                   	push   %eax
-  100cbf:	e8 a0 fe ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100cc4:	83 c4 20             	add    $0x20,%esp
-  100cc7:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
-  100ccb:	8b 45 08             	mov    0x8(%ebp),%eax
-  100cce:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
-  100cd5:	80 6d f7 01          	subb   $0x1,-0x9(%ebp)
-  100cd9:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
-  100cdd:	75 c6                	jne    100ca5 <_ZN16InterruptManagerC1EtP21GlobalDescriptorTable+0xa3>
-  100cdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100ce2:	0f b7 c0             	movzwl %ax,%eax
-  100ce5:	83 ec 0c             	sub    $0xc,%esp
-  100ce8:	6a 0e                	push   $0xe
-  100cea:	6a 00                	push   $0x0
-  100cec:	c7 c2 c2 0a 10 00    	mov    $0x100ac2,%edx
-  100cf2:	52                   	push   %edx
-  100cf3:	50                   	push   %eax
-  100cf4:	6a 00                	push   $0x0
-  100cf6:	e8 69 fe ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100cfb:	83 c4 20             	add    $0x20,%esp
-  100cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100d01:	0f b7 c0             	movzwl %ax,%eax
-  100d04:	83 ec 0c             	sub    $0xc,%esp
-  100d07:	6a 0e                	push   $0xe
-  100d09:	6a 00                	push   $0x0
-  100d0b:	c7 c2 11 09 10 00    	mov    $0x100911,%edx
-  100d11:	52                   	push   %edx
-  100d12:	50                   	push   %eax
-  100d13:	6a 00                	push   $0x0
-  100d15:	e8 4a fe ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100d1a:	83 c4 20             	add    $0x20,%esp
-  100d1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100d20:	0f b7 c0             	movzwl %ax,%eax
-  100d23:	83 ec 0c             	sub    $0xc,%esp
-  100d26:	6a 0e                	push   $0xe
-  100d28:	6a 00                	push   $0x0
-  100d2a:	c7 c2 1d 09 10 00    	mov    $0x10091d,%edx
-  100d30:	52                   	push   %edx
-  100d31:	50                   	push   %eax
-  100d32:	6a 01                	push   $0x1
-  100d34:	e8 2b fe ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100d39:	83 c4 20             	add    $0x20,%esp
-  100d3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100d3f:	0f b7 c0             	movzwl %ax,%eax
-  100d42:	83 ec 0c             	sub    $0xc,%esp
-  100d45:	6a 0e                	push   $0xe
-  100d47:	6a 00                	push   $0x0
-  100d49:	c7 c2 29 09 10 00    	mov    $0x100929,%edx
-  100d4f:	52                   	push   %edx
-  100d50:	50                   	push   %eax
-  100d51:	6a 02                	push   $0x2
-  100d53:	e8 0c fe ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100d58:	83 c4 20             	add    $0x20,%esp
-  100d5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100d5e:	0f b7 c0             	movzwl %ax,%eax
-  100d61:	83 ec 0c             	sub    $0xc,%esp
-  100d64:	6a 0e                	push   $0xe
-  100d66:	6a 00                	push   $0x0
-  100d68:	c7 c2 35 09 10 00    	mov    $0x100935,%edx
-  100d6e:	52                   	push   %edx
-  100d6f:	50                   	push   %eax
-  100d70:	6a 03                	push   $0x3
-  100d72:	e8 ed fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100d77:	83 c4 20             	add    $0x20,%esp
-  100d7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100d7d:	0f b7 c0             	movzwl %ax,%eax
-  100d80:	83 ec 0c             	sub    $0xc,%esp
-  100d83:	6a 0e                	push   $0xe
-  100d85:	6a 00                	push   $0x0
-  100d87:	c7 c2 41 09 10 00    	mov    $0x100941,%edx
-  100d8d:	52                   	push   %edx
-  100d8e:	50                   	push   %eax
-  100d8f:	6a 04                	push   $0x4
-  100d91:	e8 ce fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100d96:	83 c4 20             	add    $0x20,%esp
-  100d99:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100d9c:	0f b7 c0             	movzwl %ax,%eax
-  100d9f:	83 ec 0c             	sub    $0xc,%esp
-  100da2:	6a 0e                	push   $0xe
-  100da4:	6a 00                	push   $0x0
-  100da6:	c7 c2 4d 09 10 00    	mov    $0x10094d,%edx
-  100dac:	52                   	push   %edx
-  100dad:	50                   	push   %eax
-  100dae:	6a 05                	push   $0x5
-  100db0:	e8 af fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100db5:	83 c4 20             	add    $0x20,%esp
-  100db8:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100dbb:	0f b7 c0             	movzwl %ax,%eax
-  100dbe:	83 ec 0c             	sub    $0xc,%esp
-  100dc1:	6a 0e                	push   $0xe
-  100dc3:	6a 00                	push   $0x0
-  100dc5:	c7 c2 59 09 10 00    	mov    $0x100959,%edx
-  100dcb:	52                   	push   %edx
-  100dcc:	50                   	push   %eax
-  100dcd:	6a 06                	push   $0x6
-  100dcf:	e8 90 fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100dd4:	83 c4 20             	add    $0x20,%esp
-  100dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100dda:	0f b7 c0             	movzwl %ax,%eax
-  100ddd:	83 ec 0c             	sub    $0xc,%esp
-  100de0:	6a 0e                	push   $0xe
-  100de2:	6a 00                	push   $0x0
-  100de4:	c7 c2 65 09 10 00    	mov    $0x100965,%edx
-  100dea:	52                   	push   %edx
-  100deb:	50                   	push   %eax
-  100dec:	6a 07                	push   $0x7
-  100dee:	e8 71 fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100df3:	83 c4 20             	add    $0x20,%esp
-  100df6:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100df9:	0f b7 c0             	movzwl %ax,%eax
-  100dfc:	83 ec 0c             	sub    $0xc,%esp
-  100dff:	6a 0e                	push   $0xe
-  100e01:	6a 00                	push   $0x0
-  100e03:	c7 c2 71 09 10 00    	mov    $0x100971,%edx
-  100e09:	52                   	push   %edx
-  100e0a:	50                   	push   %eax
-  100e0b:	6a 08                	push   $0x8
-  100e0d:	e8 52 fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100e12:	83 c4 20             	add    $0x20,%esp
-  100e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100e18:	0f b7 c0             	movzwl %ax,%eax
-  100e1b:	83 ec 0c             	sub    $0xc,%esp
-  100e1e:	6a 0e                	push   $0xe
-  100e20:	6a 00                	push   $0x0
-  100e22:	c7 c2 7d 09 10 00    	mov    $0x10097d,%edx
-  100e28:	52                   	push   %edx
-  100e29:	50                   	push   %eax
-  100e2a:	6a 09                	push   $0x9
-  100e2c:	e8 33 fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100e31:	83 c4 20             	add    $0x20,%esp
-  100e34:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100e37:	0f b7 c0             	movzwl %ax,%eax
-  100e3a:	83 ec 0c             	sub    $0xc,%esp
-  100e3d:	6a 0e                	push   $0xe
-  100e3f:	6a 00                	push   $0x0
-  100e41:	c7 c2 89 09 10 00    	mov    $0x100989,%edx
-  100e47:	52                   	push   %edx
-  100e48:	50                   	push   %eax
-  100e49:	6a 0a                	push   $0xa
-  100e4b:	e8 14 fd ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100e50:	83 c4 20             	add    $0x20,%esp
-  100e53:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100e56:	0f b7 c0             	movzwl %ax,%eax
-  100e59:	83 ec 0c             	sub    $0xc,%esp
-  100e5c:	6a 0e                	push   $0xe
-  100e5e:	6a 00                	push   $0x0
-  100e60:	c7 c2 95 09 10 00    	mov    $0x100995,%edx
-  100e66:	52                   	push   %edx
-  100e67:	50                   	push   %eax
-  100e68:	6a 0b                	push   $0xb
-  100e6a:	e8 f5 fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100e6f:	83 c4 20             	add    $0x20,%esp
-  100e72:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100e75:	0f b7 c0             	movzwl %ax,%eax
-  100e78:	83 ec 0c             	sub    $0xc,%esp
-  100e7b:	6a 0e                	push   $0xe
-  100e7d:	6a 00                	push   $0x0
-  100e7f:	c7 c2 a1 09 10 00    	mov    $0x1009a1,%edx
-  100e85:	52                   	push   %edx
-  100e86:	50                   	push   %eax
-  100e87:	6a 0c                	push   $0xc
-  100e89:	e8 d6 fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100e8e:	83 c4 20             	add    $0x20,%esp
-  100e91:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100e94:	0f b7 c0             	movzwl %ax,%eax
-  100e97:	83 ec 0c             	sub    $0xc,%esp
-  100e9a:	6a 0e                	push   $0xe
-  100e9c:	6a 00                	push   $0x0
-  100e9e:	c7 c2 ad 09 10 00    	mov    $0x1009ad,%edx
-  100ea4:	52                   	push   %edx
-  100ea5:	50                   	push   %eax
-  100ea6:	6a 0d                	push   $0xd
-  100ea8:	e8 b7 fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100ead:	83 c4 20             	add    $0x20,%esp
-  100eb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100eb3:	0f b7 c0             	movzwl %ax,%eax
-  100eb6:	83 ec 0c             	sub    $0xc,%esp
-  100eb9:	6a 0e                	push   $0xe
-  100ebb:	6a 00                	push   $0x0
-  100ebd:	c7 c2 b9 09 10 00    	mov    $0x1009b9,%edx
-  100ec3:	52                   	push   %edx
-  100ec4:	50                   	push   %eax
-  100ec5:	6a 0e                	push   $0xe
-  100ec7:	e8 98 fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100ecc:	83 c4 20             	add    $0x20,%esp
-  100ecf:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100ed2:	0f b7 c0             	movzwl %ax,%eax
-  100ed5:	83 ec 0c             	sub    $0xc,%esp
-  100ed8:	6a 0e                	push   $0xe
-  100eda:	6a 00                	push   $0x0
-  100edc:	c7 c2 c5 09 10 00    	mov    $0x1009c5,%edx
-  100ee2:	52                   	push   %edx
-  100ee3:	50                   	push   %eax
-  100ee4:	6a 0f                	push   $0xf
-  100ee6:	e8 79 fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100eeb:	83 c4 20             	add    $0x20,%esp
-  100eee:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100ef1:	0f b7 c0             	movzwl %ax,%eax
-  100ef4:	83 ec 0c             	sub    $0xc,%esp
-  100ef7:	6a 0e                	push   $0xe
-  100ef9:	6a 00                	push   $0x0
-  100efb:	c7 c2 d1 09 10 00    	mov    $0x1009d1,%edx
-  100f01:	52                   	push   %edx
-  100f02:	50                   	push   %eax
-  100f03:	6a 10                	push   $0x10
-  100f05:	e8 5a fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100f0a:	83 c4 20             	add    $0x20,%esp
-  100f0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100f10:	0f b7 c0             	movzwl %ax,%eax
-  100f13:	83 ec 0c             	sub    $0xc,%esp
-  100f16:	6a 0e                	push   $0xe
-  100f18:	6a 00                	push   $0x0
-  100f1a:	c7 c2 dd 09 10 00    	mov    $0x1009dd,%edx
-  100f20:	52                   	push   %edx
-  100f21:	50                   	push   %eax
-  100f22:	6a 11                	push   $0x11
-  100f24:	e8 3b fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100f29:	83 c4 20             	add    $0x20,%esp
-  100f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100f2f:	0f b7 c0             	movzwl %ax,%eax
-  100f32:	83 ec 0c             	sub    $0xc,%esp
-  100f35:	6a 0e                	push   $0xe
-  100f37:	6a 00                	push   $0x0
-  100f39:	c7 c2 e9 09 10 00    	mov    $0x1009e9,%edx
-  100f3f:	52                   	push   %edx
-  100f40:	50                   	push   %eax
-  100f41:	6a 12                	push   $0x12
-  100f43:	e8 1c fc ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100f48:	83 c4 20             	add    $0x20,%esp
-  100f4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100f4e:	0f b7 c0             	movzwl %ax,%eax
-  100f51:	83 ec 0c             	sub    $0xc,%esp
-  100f54:	6a 0e                	push   $0xe
-  100f56:	6a 00                	push   $0x0
-  100f58:	c7 c2 f5 09 10 00    	mov    $0x1009f5,%edx
-  100f5e:	52                   	push   %edx
-  100f5f:	50                   	push   %eax
-  100f60:	6a 13                	push   $0x13
-  100f62:	e8 fd fb ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100f67:	83 c4 20             	add    $0x20,%esp
-  100f6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100f6d:	0f b7 d0             	movzwl %ax,%edx
-  100f70:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  100f74:	0f b6 c0             	movzbl %al,%eax
-  100f77:	83 ec 0c             	sub    $0xc,%esp
-  100f7a:	6a 0e                	push   $0xe
-  100f7c:	6a 00                	push   $0x0
-  100f7e:	c7 c1 01 0a 10 00    	mov    $0x100a01,%ecx
-  100f84:	51                   	push   %ecx
-  100f85:	52                   	push   %edx
-  100f86:	50                   	push   %eax
-  100f87:	e8 d8 fb ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100f8c:	83 c4 20             	add    $0x20,%esp
-  100f8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100f92:	0f b7 d0             	movzwl %ax,%edx
-  100f95:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  100f99:	83 c0 01             	add    $0x1,%eax
-  100f9c:	0f b6 c0             	movzbl %al,%eax
-  100f9f:	83 ec 0c             	sub    $0xc,%esp
-  100fa2:	6a 0e                	push   $0xe
-  100fa4:	6a 00                	push   $0x0
-  100fa6:	c7 c1 0d 0a 10 00    	mov    $0x100a0d,%ecx
-  100fac:	51                   	push   %ecx
-  100fad:	52                   	push   %edx
-  100fae:	50                   	push   %eax
-  100faf:	e8 b0 fb ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100fb4:	83 c4 20             	add    $0x20,%esp
-  100fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100fba:	0f b7 d0             	movzwl %ax,%edx
-  100fbd:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  100fc1:	83 c0 02             	add    $0x2,%eax
-  100fc4:	0f b6 c0             	movzbl %al,%eax
-  100fc7:	83 ec 0c             	sub    $0xc,%esp
-  100fca:	6a 0e                	push   $0xe
-  100fcc:	6a 00                	push   $0x0
-  100fce:	c7 c1 19 0a 10 00    	mov    $0x100a19,%ecx
-  100fd4:	51                   	push   %ecx
-  100fd5:	52                   	push   %edx
-  100fd6:	50                   	push   %eax
-  100fd7:	e8 88 fb ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  100fdc:	83 c4 20             	add    $0x20,%esp
-  100fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  100fe2:	0f b7 d0             	movzwl %ax,%edx
-  100fe5:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  100fe9:	83 c0 03             	add    $0x3,%eax
-  100fec:	0f b6 c0             	movzbl %al,%eax
-  100fef:	83 ec 0c             	sub    $0xc,%esp
-  100ff2:	6a 0e                	push   $0xe
-  100ff4:	6a 00                	push   $0x0
-  100ff6:	c7 c1 22 0a 10 00    	mov    $0x100a22,%ecx
-  100ffc:	51                   	push   %ecx
-  100ffd:	52                   	push   %edx
-  100ffe:	50                   	push   %eax
-  100fff:	e8 60 fb ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  101004:	83 c4 20             	add    $0x20,%esp
-  101007:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  10100a:	0f b7 d0             	movzwl %ax,%edx
-  10100d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101011:	83 c0 04             	add    $0x4,%eax
-  101014:	0f b6 c0             	movzbl %al,%eax
-  101017:	83 ec 0c             	sub    $0xc,%esp
-  10101a:	6a 0e                	push   $0xe
-  10101c:	6a 00                	push   $0x0
-  10101e:	c7 c1 2b 0a 10 00    	mov    $0x100a2b,%ecx
-  101024:	51                   	push   %ecx
-  101025:	52                   	push   %edx
-  101026:	50                   	push   %eax
-  101027:	e8 38 fb ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  10102c:	83 c4 20             	add    $0x20,%esp
-  10102f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  101032:	0f b7 d0             	movzwl %ax,%edx
-  101035:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101039:	83 c0 05             	add    $0x5,%eax
-  10103c:	0f b6 c0             	movzbl %al,%eax
-  10103f:	83 ec 0c             	sub    $0xc,%esp
-  101042:	6a 0e                	push   $0xe
-  101044:	6a 00                	push   $0x0
-  101046:	c7 c1 34 0a 10 00    	mov    $0x100a34,%ecx
-  10104c:	51                   	push   %ecx
-  10104d:	52                   	push   %edx
-  10104e:	50                   	push   %eax
-  10104f:	e8 10 fb ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  101054:	83 c4 20             	add    $0x20,%esp
-  101057:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  10105a:	0f b7 d0             	movzwl %ax,%edx
-  10105d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101061:	83 c0 06             	add    $0x6,%eax
-  101064:	0f b6 c0             	movzbl %al,%eax
-  101067:	83 ec 0c             	sub    $0xc,%esp
-  10106a:	6a 0e                	push   $0xe
-  10106c:	6a 00                	push   $0x0
-  10106e:	c7 c1 3d 0a 10 00    	mov    $0x100a3d,%ecx
-  101074:	51                   	push   %ecx
-  101075:	52                   	push   %edx
-  101076:	50                   	push   %eax
-  101077:	e8 e8 fa ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  10107c:	83 c4 20             	add    $0x20,%esp
-  10107f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  101082:	0f b7 d0             	movzwl %ax,%edx
-  101085:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101089:	83 c0 07             	add    $0x7,%eax
-  10108c:	0f b6 c0             	movzbl %al,%eax
-  10108f:	83 ec 0c             	sub    $0xc,%esp
-  101092:	6a 0e                	push   $0xe
-  101094:	6a 00                	push   $0x0
-  101096:	c7 c1 46 0a 10 00    	mov    $0x100a46,%ecx
-  10109c:	51                   	push   %ecx
-  10109d:	52                   	push   %edx
-  10109e:	50                   	push   %eax
-  10109f:	e8 c0 fa ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  1010a4:	83 c4 20             	add    $0x20,%esp
-  1010a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  1010aa:	0f b7 d0             	movzwl %ax,%edx
-  1010ad:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  1010b1:	83 c0 08             	add    $0x8,%eax
-  1010b4:	0f b6 c0             	movzbl %al,%eax
-  1010b7:	83 ec 0c             	sub    $0xc,%esp
-  1010ba:	6a 0e                	push   $0xe
-  1010bc:	6a 00                	push   $0x0
-  1010be:	c7 c1 4f 0a 10 00    	mov    $0x100a4f,%ecx
-  1010c4:	51                   	push   %ecx
-  1010c5:	52                   	push   %edx
-  1010c6:	50                   	push   %eax
-  1010c7:	e8 98 fa ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  1010cc:	83 c4 20             	add    $0x20,%esp
-  1010cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  1010d2:	0f b7 d0             	movzwl %ax,%edx
-  1010d5:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  1010d9:	83 c0 09             	add    $0x9,%eax
-  1010dc:	0f b6 c0             	movzbl %al,%eax
-  1010df:	83 ec 0c             	sub    $0xc,%esp
-  1010e2:	6a 0e                	push   $0xe
-  1010e4:	6a 00                	push   $0x0
-  1010e6:	c7 c1 58 0a 10 00    	mov    $0x100a58,%ecx
-  1010ec:	51                   	push   %ecx
-  1010ed:	52                   	push   %edx
-  1010ee:	50                   	push   %eax
-  1010ef:	e8 70 fa ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  1010f4:	83 c4 20             	add    $0x20,%esp
-  1010f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  1010fa:	0f b7 d0             	movzwl %ax,%edx
-  1010fd:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101101:	83 c0 0a             	add    $0xa,%eax
-  101104:	0f b6 c0             	movzbl %al,%eax
-  101107:	83 ec 0c             	sub    $0xc,%esp
-  10110a:	6a 0e                	push   $0xe
-  10110c:	6a 00                	push   $0x0
-  10110e:	c7 c1 61 0a 10 00    	mov    $0x100a61,%ecx
-  101114:	51                   	push   %ecx
-  101115:	52                   	push   %edx
-  101116:	50                   	push   %eax
-  101117:	e8 48 fa ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  10111c:	83 c4 20             	add    $0x20,%esp
-  10111f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  101122:	0f b7 d0             	movzwl %ax,%edx
-  101125:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101129:	83 c0 0b             	add    $0xb,%eax
-  10112c:	0f b6 c0             	movzbl %al,%eax
-  10112f:	83 ec 0c             	sub    $0xc,%esp
-  101132:	6a 0e                	push   $0xe
-  101134:	6a 00                	push   $0x0
-  101136:	c7 c1 6a 0a 10 00    	mov    $0x100a6a,%ecx
-  10113c:	51                   	push   %ecx
-  10113d:	52                   	push   %edx
-  10113e:	50                   	push   %eax
-  10113f:	e8 20 fa ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  101144:	83 c4 20             	add    $0x20,%esp
-  101147:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  10114a:	0f b7 d0             	movzwl %ax,%edx
-  10114d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101151:	83 c0 0c             	add    $0xc,%eax
-  101154:	0f b6 c0             	movzbl %al,%eax
-  101157:	83 ec 0c             	sub    $0xc,%esp
-  10115a:	6a 0e                	push   $0xe
-  10115c:	6a 00                	push   $0x0
-  10115e:	c7 c1 73 0a 10 00    	mov    $0x100a73,%ecx
-  101164:	51                   	push   %ecx
-  101165:	52                   	push   %edx
-  101166:	50                   	push   %eax
-  101167:	e8 f8 f9 ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  10116c:	83 c4 20             	add    $0x20,%esp
-  10116f:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  101172:	0f b7 d0             	movzwl %ax,%edx
-  101175:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101179:	83 c0 0d             	add    $0xd,%eax
-  10117c:	0f b6 c0             	movzbl %al,%eax
-  10117f:	83 ec 0c             	sub    $0xc,%esp
-  101182:	6a 0e                	push   $0xe
-  101184:	6a 00                	push   $0x0
-  101186:	c7 c1 7c 0a 10 00    	mov    $0x100a7c,%ecx
-  10118c:	51                   	push   %ecx
-  10118d:	52                   	push   %edx
-  10118e:	50                   	push   %eax
-  10118f:	e8 d0 f9 ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  101194:	83 c4 20             	add    $0x20,%esp
-  101197:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  10119a:	0f b7 d0             	movzwl %ax,%edx
-  10119d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  1011a1:	83 c0 0e             	add    $0xe,%eax
-  1011a4:	0f b6 c0             	movzbl %al,%eax
-  1011a7:	83 ec 0c             	sub    $0xc,%esp
-  1011aa:	6a 0e                	push   $0xe
-  1011ac:	6a 00                	push   $0x0
-  1011ae:	c7 c1 85 0a 10 00    	mov    $0x100a85,%ecx
-  1011b4:	51                   	push   %ecx
-  1011b5:	52                   	push   %edx
-  1011b6:	50                   	push   %eax
-  1011b7:	e8 a8 f9 ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  1011bc:	83 c4 20             	add    $0x20,%esp
-  1011bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
-  1011c2:	0f b7 d0             	movzwl %ax,%edx
-  1011c5:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  1011c9:	83 c0 0f             	add    $0xf,%eax
-  1011cc:	0f b6 c0             	movzbl %al,%eax
-  1011cf:	83 ec 0c             	sub    $0xc,%esp
-  1011d2:	6a 0e                	push   $0xe
-  1011d4:	6a 00                	push   $0x0
-  1011d6:	c7 c1 8e 0a 10 00    	mov    $0x100a8e,%ecx
-  1011dc:	51                   	push   %ecx
-  1011dd:	52                   	push   %edx
-  1011de:	50                   	push   %eax
-  1011df:	e8 80 f9 ff ff       	call   100b64 <_ZN16InterruptManager32SetInterruptDescriptorTableEntryEhtPFvvEhh>
-  1011e4:	83 c4 20             	add    $0x20,%esp
-  1011e7:	8b 45 08             	mov    0x8(%ebp),%eax
-  1011ea:	05 04 04 00 00       	add    $0x404,%eax
-  1011ef:	83 ec 08             	sub    $0x8,%esp
-  1011f2:	6a 11                	push   $0x11
-  1011f4:	50                   	push   %eax
-  1011f5:	e8 ee f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  1011fa:	83 c4 10             	add    $0x10,%esp
-  1011fd:	8b 45 08             	mov    0x8(%ebp),%eax
-  101200:	05 14 04 00 00       	add    $0x414,%eax
-  101205:	83 ec 08             	sub    $0x8,%esp
-  101208:	6a 11                	push   $0x11
-  10120a:	50                   	push   %eax
-  10120b:	e8 d8 f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  101210:	83 c4 10             	add    $0x10,%esp
-  101213:	8b 45 08             	mov    0x8(%ebp),%eax
-  101216:	8d 90 0c 04 00 00    	lea    0x40c(%eax),%edx
-  10121c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  101220:	0f b6 c0             	movzbl %al,%eax
-  101223:	83 ec 08             	sub    $0x8,%esp
-  101226:	50                   	push   %eax
-  101227:	52                   	push   %edx
-  101228:	e8 bb f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  10122d:	83 c4 10             	add    $0x10,%esp
-  101230:	8b 45 08             	mov    0x8(%ebp),%eax
-  101233:	8d 90 1c 04 00 00    	lea    0x41c(%eax),%edx
-  101239:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-  10123d:	83 c0 08             	add    $0x8,%eax
-  101240:	0f b6 c0             	movzbl %al,%eax
-  101243:	83 ec 08             	sub    $0x8,%esp
-  101246:	50                   	push   %eax
-  101247:	52                   	push   %edx
-  101248:	e8 9b f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  10124d:	83 c4 10             	add    $0x10,%esp
-  101250:	8b 45 08             	mov    0x8(%ebp),%eax
-  101253:	05 0c 04 00 00       	add    $0x40c,%eax
-  101258:	83 ec 08             	sub    $0x8,%esp
-  10125b:	6a 04                	push   $0x4
-  10125d:	50                   	push   %eax
-  10125e:	e8 85 f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  101263:	83 c4 10             	add    $0x10,%esp
-  101266:	8b 45 08             	mov    0x8(%ebp),%eax
-  101269:	05 1c 04 00 00       	add    $0x41c,%eax
-  10126e:	83 ec 08             	sub    $0x8,%esp
-  101271:	6a 02                	push   $0x2
-  101273:	50                   	push   %eax
-  101274:	e8 6f f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  101279:	83 c4 10             	add    $0x10,%esp
-  10127c:	8b 45 08             	mov    0x8(%ebp),%eax
-  10127f:	05 0c 04 00 00       	add    $0x40c,%eax
-  101284:	83 ec 08             	sub    $0x8,%esp
-  101287:	6a 01                	push   $0x1
-  101289:	50                   	push   %eax
-  10128a:	e8 59 f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  10128f:	83 c4 10             	add    $0x10,%esp
-  101292:	8b 45 08             	mov    0x8(%ebp),%eax
-  101295:	05 1c 04 00 00       	add    $0x41c,%eax
-  10129a:	83 ec 08             	sub    $0x8,%esp
-  10129d:	6a 01                	push   $0x1
-  10129f:	50                   	push   %eax
-  1012a0:	e8 43 f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  1012a5:	83 c4 10             	add    $0x10,%esp
-  1012a8:	8b 45 08             	mov    0x8(%ebp),%eax
-  1012ab:	05 0c 04 00 00       	add    $0x40c,%eax
-  1012b0:	83 ec 08             	sub    $0x8,%esp
-  1012b3:	6a 00                	push   $0x0
-  1012b5:	50                   	push   %eax
-  1012b6:	e8 2d f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  1012bb:	83 c4 10             	add    $0x10,%esp
-  1012be:	8b 45 08             	mov    0x8(%ebp),%eax
-  1012c1:	05 1c 04 00 00       	add    $0x41c,%eax
-  1012c6:	83 ec 08             	sub    $0x8,%esp
-  1012c9:	6a 00                	push   $0x0
-  1012cb:	50                   	push   %eax
-  1012cc:	e8 17 f6 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  1012d1:	83 c4 10             	add    $0x10,%esp
-  1012d4:	66 c7 45 e9 ff 07    	movw   $0x7ff,-0x17(%ebp)
-  1012da:	8d 83 90 00 20 00    	lea    0x200090(%ebx),%eax
-  1012e0:	89 45 eb             	mov    %eax,-0x15(%ebp)
-  1012e3:	0f 01 5d e9          	lidtl  -0x17(%ebp)
-  1012e7:	90                   	nop
-  1012e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1012eb:	c9                   	leave  
-  1012ec:	c3                   	ret    
-  1012ed:	90                   	nop
-
-001012ee <_ZN16InterruptManagerD1Ev>:
-  1012ee:	55                   	push   %ebp
-  1012ef:	89 e5                	mov    %esp,%ebp
-  1012f1:	53                   	push   %ebx
-  1012f2:	83 ec 04             	sub    $0x4,%esp
-  1012f5:	e8 8d f0 ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  1012fa:	81 c3 76 0a 00 00    	add    $0xa76,%ebx
-  101300:	83 ec 0c             	sub    $0xc,%esp
-  101303:	ff 75 08             	push   0x8(%ebp)
-  101306:	e8 b1 00 00 00       	call   1013bc <_ZN16InterruptManager10DeactivateEv>
-  10130b:	83 c4 10             	add    $0x10,%esp
-  10130e:	8b 45 08             	mov    0x8(%ebp),%eax
-  101311:	05 1c 04 00 00       	add    $0x41c,%eax
-  101316:	83 ec 0c             	sub    $0xc,%esp
-  101319:	50                   	push   %eax
-  10131a:	e8 9f f5 ff ff       	call   1008be <_ZN12Port8BitSlowD1Ev>
-  10131f:	83 c4 10             	add    $0x10,%esp
-  101322:	8b 45 08             	mov    0x8(%ebp),%eax
-  101325:	05 14 04 00 00       	add    $0x414,%eax
-  10132a:	83 ec 0c             	sub    $0xc,%esp
-  10132d:	50                   	push   %eax
-  10132e:	e8 8b f5 ff ff       	call   1008be <_ZN12Port8BitSlowD1Ev>
-  101333:	83 c4 10             	add    $0x10,%esp
-  101336:	8b 45 08             	mov    0x8(%ebp),%eax
-  101339:	05 0c 04 00 00       	add    $0x40c,%eax
-  10133e:	83 ec 0c             	sub    $0xc,%esp
-  101341:	50                   	push   %eax
-  101342:	e8 77 f5 ff ff       	call   1008be <_ZN12Port8BitSlowD1Ev>
-  101347:	83 c4 10             	add    $0x10,%esp
-  10134a:	8b 45 08             	mov    0x8(%ebp),%eax
-  10134d:	05 04 04 00 00       	add    $0x404,%eax
-  101352:	83 ec 0c             	sub    $0xc,%esp
-  101355:	50                   	push   %eax
-  101356:	e8 63 f5 ff ff       	call   1008be <_ZN12Port8BitSlowD1Ev>
-  10135b:	83 c4 10             	add    $0x10,%esp
-  10135e:	90                   	nop
-  10135f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  101362:	c9                   	leave  
-  101363:	c3                   	ret    
-
-00101364 <_ZN16InterruptManager23HardwareInterruptOffsetEv>:
-  101364:	55                   	push   %ebp
-  101365:	89 e5                	mov    %esp,%ebp
-  101367:	e8 17 f0 ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  10136c:	05 04 0a 00 00       	add    $0xa04,%eax
-  101371:	8b 45 08             	mov    0x8(%ebp),%eax
-  101374:	0f b7 80 00 04 00 00 	movzwl 0x400(%eax),%eax
-  10137b:	5d                   	pop    %ebp
-  10137c:	c3                   	ret    
-  10137d:	90                   	nop
-
-0010137e <_ZN16InterruptManager8ActivateEv>:
-  10137e:	55                   	push   %ebp
-  10137f:	89 e5                	mov    %esp,%ebp
-  101381:	53                   	push   %ebx
-  101382:	83 ec 04             	sub    $0x4,%esp
-  101385:	e8 fd ef ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  10138a:	81 c3 e6 09 00 00    	add    $0x9e6,%ebx
-  101390:	8b 83 90 08 20 00    	mov    0x200890(%ebx),%eax
-  101396:	85 c0                	test   %eax,%eax
-  101398:	74 12                	je     1013ac <_ZN16InterruptManager8ActivateEv+0x2e>
-  10139a:	8b 83 90 08 20 00    	mov    0x200890(%ebx),%eax
-  1013a0:	83 ec 0c             	sub    $0xc,%esp
-  1013a3:	50                   	push   %eax
-  1013a4:	e8 13 00 00 00       	call   1013bc <_ZN16InterruptManager10DeactivateEv>
-  1013a9:	83 c4 10             	add    $0x10,%esp
-  1013ac:	8b 45 08             	mov    0x8(%ebp),%eax
-  1013af:	89 83 90 08 20 00    	mov    %eax,0x200890(%ebx)
-  1013b5:	fb                   	sti    
-  1013b6:	90                   	nop
-  1013b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1013ba:	c9                   	leave  
-  1013bb:	c3                   	ret    
-
-001013bc <_ZN16InterruptManager10DeactivateEv>:
-  1013bc:	55                   	push   %ebp
-  1013bd:	89 e5                	mov    %esp,%ebp
-  1013bf:	e8 bf ef ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1013c4:	05 ac 09 00 00       	add    $0x9ac,%eax
-  1013c9:	8b 90 90 08 20 00    	mov    0x200890(%eax),%edx
-  1013cf:	39 55 08             	cmp    %edx,0x8(%ebp)
-  1013d2:	75 0b                	jne    1013df <_ZN16InterruptManager10DeactivateEv+0x23>
-  1013d4:	c7 80 90 08 20 00 00 	movl   $0x0,0x200890(%eax)
-  1013db:	00 00 00 
-  1013de:	fa                   	cli    
-  1013df:	90                   	nop
-  1013e0:	5d                   	pop    %ebp
-  1013e1:	c3                   	ret    
-
-001013e2 <_ZN16InterruptManager15HandleInterruptEhj>:
-  1013e2:	55                   	push   %ebp
-  1013e3:	89 e5                	mov    %esp,%ebp
-  1013e5:	83 ec 18             	sub    $0x18,%esp
-  1013e8:	e8 96 ef ff ff       	call   100383 <__x86.get_pc_thunk.ax>
-  1013ed:	05 83 09 00 00       	add    $0x983,%eax
-  1013f2:	8b 55 08             	mov    0x8(%ebp),%edx
-  1013f5:	88 55 f4             	mov    %dl,-0xc(%ebp)
-  1013f8:	8b 90 90 08 20 00    	mov    0x200890(%eax),%edx
-  1013fe:	85 d2                	test   %edx,%edx
-  101400:	74 1c                	je     10141e <_ZN16InterruptManager15HandleInterruptEhj+0x3c>
-  101402:	8b 80 90 08 20 00    	mov    0x200890(%eax),%eax
-  101408:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
-  10140c:	83 ec 04             	sub    $0x4,%esp
-  10140f:	ff 75 0c             	push   0xc(%ebp)
-  101412:	52                   	push   %edx
-  101413:	50                   	push   %eax
-  101414:	e8 0b 00 00 00       	call   101424 <_ZN16InterruptManager17DoHandleInterruptEhj>
-  101419:	83 c4 10             	add    $0x10,%esp
-  10141c:	eb 03                	jmp    101421 <_ZN16InterruptManager15HandleInterruptEhj+0x3f>
-  10141e:	8b 45 0c             	mov    0xc(%ebp),%eax
-  101421:	c9                   	leave  
-  101422:	c3                   	ret    
-  101423:	90                   	nop
-
-00101424 <_ZN16InterruptManager17DoHandleInterruptEhj>:
-  101424:	55                   	push   %ebp
-  101425:	89 e5                	mov    %esp,%ebp
-  101427:	53                   	push   %ebx
-  101428:	83 ec 14             	sub    $0x14,%esp
-  10142b:	e8 57 ef ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  101430:	81 c3 40 09 00 00    	add    $0x940,%ebx
-  101436:	8b 45 0c             	mov    0xc(%ebp),%eax
-  101439:	88 45 f4             	mov    %al,-0xc(%ebp)
-  10143c:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
-  101440:	8b 45 08             	mov    0x8(%ebp),%eax
-  101443:	8b 04 90             	mov    (%eax,%edx,4),%eax
-  101446:	85 c0                	test   %eax,%eax
-  101448:	74 29                	je     101473 <_ZN16InterruptManager17DoHandleInterruptEhj+0x4f>
-  10144a:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
-  10144e:	8b 45 08             	mov    0x8(%ebp),%eax
-  101451:	8b 04 90             	mov    (%eax,%edx,4),%eax
-  101454:	8b 00                	mov    (%eax),%eax
-  101456:	8b 00                	mov    (%eax),%eax
-  101458:	0f b6 4d f4          	movzbl -0xc(%ebp),%ecx
-  10145c:	8b 55 08             	mov    0x8(%ebp),%edx
-  10145f:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-  101462:	83 ec 08             	sub    $0x8,%esp
-  101465:	ff 75 10             	push   0x10(%ebp)
-  101468:	52                   	push   %edx
-  101469:	ff d0                	call   *%eax
-  10146b:	83 c4 10             	add    $0x10,%esp
-  10146e:	89 45 10             	mov    %eax,0x10(%ebp)
-  101471:	eb 28                	jmp    10149b <_ZN16InterruptManager17DoHandleInterruptEhj+0x77>
-  101473:	80 7d f4 20          	cmpb   $0x20,-0xc(%ebp)
-  101477:	74 22                	je     10149b <_ZN16InterruptManager17DoHandleInterruptEhj+0x77>
-  101479:	83 ec 0c             	sub    $0xc,%esp
-  10147c:	8d 83 df f9 ff ff    	lea    -0x621(%ebx),%eax
-  101482:	50                   	push   %eax
-  101483:	e8 99 eb ff ff       	call   100021 <_Z6printfPKc>
-  101488:	83 c4 10             	add    $0x10,%esp
-  10148b:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
-  10148f:	83 ec 0c             	sub    $0xc,%esp
-  101492:	50                   	push   %eax
-  101493:	e8 74 ed ff ff       	call   10020c <_Z9printfHexh>
-  101498:	83 c4 10             	add    $0x10,%esp
-  10149b:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
-  10149f:	76 38                	jbe    1014d9 <_ZN16InterruptManager17DoHandleInterruptEhj+0xb5>
-  1014a1:	80 7d f4 30          	cmpb   $0x30,-0xc(%ebp)
-  1014a5:	77 32                	ja     1014d9 <_ZN16InterruptManager17DoHandleInterruptEhj+0xb5>
-  1014a7:	8b 45 08             	mov    0x8(%ebp),%eax
-  1014aa:	05 04 04 00 00       	add    $0x404,%eax
-  1014af:	83 ec 08             	sub    $0x8,%esp
-  1014b2:	6a 20                	push   $0x20
-  1014b4:	50                   	push   %eax
-  1014b5:	e8 2e f4 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  1014ba:	83 c4 10             	add    $0x10,%esp
-  1014bd:	80 7d f4 27          	cmpb   $0x27,-0xc(%ebp)
-  1014c1:	76 16                	jbe    1014d9 <_ZN16InterruptManager17DoHandleInterruptEhj+0xb5>
-  1014c3:	8b 45 08             	mov    0x8(%ebp),%eax
-  1014c6:	05 14 04 00 00       	add    $0x414,%eax
-  1014cb:	83 ec 08             	sub    $0x8,%esp
-  1014ce:	6a 20                	push   $0x20
-  1014d0:	50                   	push   %eax
-  1014d1:	e8 12 f4 ff ff       	call   1008e8 <_ZN12Port8BitSlow5WriteEh>
-  1014d6:	83 c4 10             	add    $0x10,%esp
-  1014d9:	8b 45 10             	mov    0x10(%ebp),%eax
-  1014dc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1014df:	c9                   	leave  
-  1014e0:	c3                   	ret    
-  1014e1:	90                   	nop
-
-001014e2 <_ZN14KeyboardDriverC1EP16InterruptManager>:
-  1014e2:	55                   	push   %ebp
-  1014e3:	89 e5                	mov    %esp,%ebp
-  1014e5:	53                   	push   %ebx
-  1014e6:	83 ec 14             	sub    $0x14,%esp
-  1014e9:	e8 99 ee ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  1014ee:	81 c3 82 08 00 00    	add    $0x882,%ebx
-  1014f4:	8b 45 08             	mov    0x8(%ebp),%eax
-  1014f7:	83 ec 04             	sub    $0x4,%esp
-  1014fa:	6a 21                	push   $0x21
-  1014fc:	ff 75 0c             	push   0xc(%ebp)
-  1014ff:	50                   	push   %eax
-  101500:	e8 bf f5 ff ff       	call   100ac4 <_ZN16InterruptHandlerC1EP16InterruptManagerh>
-  101505:	83 c4 10             	add    $0x10,%esp
-  101508:	8d 93 5c 00 00 00    	lea    0x5c(%ebx),%edx
-  10150e:	8b 45 08             	mov    0x8(%ebp),%eax
-  101511:	89 10                	mov    %edx,(%eax)
-  101513:	8b 45 08             	mov    0x8(%ebp),%eax
-  101516:	83 c0 0c             	add    $0xc,%eax
-  101519:	83 ec 08             	sub    $0x8,%esp
-  10151c:	6a 60                	push   $0x60
-  10151e:	50                   	push   %eax
-  10151f:	e8 4e f1 ff ff       	call   100672 <_ZN8Port8BitC1Et>
-  101524:	83 c4 10             	add    $0x10,%esp
-  101527:	8b 45 08             	mov    0x8(%ebp),%eax
-  10152a:	83 c0 14             	add    $0x14,%eax
-  10152d:	83 ec 08             	sub    $0x8,%esp
-  101530:	6a 64                	push   $0x64
-  101532:	50                   	push   %eax
-  101533:	e8 3a f1 ff ff       	call   100672 <_ZN8Port8BitC1Et>
-  101538:	83 c4 10             	add    $0x10,%esp
-  10153b:	eb 12                	jmp    10154f <_ZN14KeyboardDriverC1EP16InterruptManager+0x6d>
-  10153d:	8b 45 08             	mov    0x8(%ebp),%eax
-  101540:	83 c0 0c             	add    $0xc,%eax
-  101543:	83 ec 0c             	sub    $0xc,%esp
-  101546:	50                   	push   %eax
-  101547:	e8 b4 f1 ff ff       	call   100700 <_ZN8Port8Bit4ReadEv>
-  10154c:	83 c4 10             	add    $0x10,%esp
-  10154f:	8b 45 08             	mov    0x8(%ebp),%eax
-  101552:	83 c0 14             	add    $0x14,%eax
-  101555:	83 ec 0c             	sub    $0xc,%esp
-  101558:	50                   	push   %eax
-  101559:	e8 a2 f1 ff ff       	call   100700 <_ZN8Port8Bit4ReadEv>
-  10155e:	83 c4 10             	add    $0x10,%esp
-  101561:	0f b6 c0             	movzbl %al,%eax
-  101564:	83 e0 01             	and    $0x1,%eax
-  101567:	85 c0                	test   %eax,%eax
-  101569:	0f 95 c0             	setne  %al
-  10156c:	84 c0                	test   %al,%al
-  10156e:	75 cd                	jne    10153d <_ZN14KeyboardDriverC1EP16InterruptManager+0x5b>
-  101570:	8b 45 08             	mov    0x8(%ebp),%eax
-  101573:	83 c0 14             	add    $0x14,%eax
-  101576:	83 ec 08             	sub    $0x8,%esp
-  101579:	68 ae 00 00 00       	push   $0xae
-  10157e:	50                   	push   %eax
-  10157f:	e8 56 f1 ff ff       	call   1006da <_ZN8Port8Bit5WriteEh>
-  101584:	83 c4 10             	add    $0x10,%esp
-  101587:	8b 45 08             	mov    0x8(%ebp),%eax
-  10158a:	83 c0 14             	add    $0x14,%eax
-  10158d:	83 ec 08             	sub    $0x8,%esp
-  101590:	6a 20                	push   $0x20
-  101592:	50                   	push   %eax
-  101593:	e8 42 f1 ff ff       	call   1006da <_ZN8Port8Bit5WriteEh>
-  101598:	83 c4 10             	add    $0x10,%esp
-  10159b:	8b 45 08             	mov    0x8(%ebp),%eax
-  10159e:	83 c0 0c             	add    $0xc,%eax
-  1015a1:	83 ec 0c             	sub    $0xc,%esp
-  1015a4:	50                   	push   %eax
-  1015a5:	e8 56 f1 ff ff       	call   100700 <_ZN8Port8Bit4ReadEv>
-  1015aa:	83 c4 10             	add    $0x10,%esp
-  1015ad:	83 c8 01             	or     $0x1,%eax
-  1015b0:	83 e0 ef             	and    $0xffffffef,%eax
-  1015b3:	88 45 f7             	mov    %al,-0x9(%ebp)
-  1015b6:	8b 45 08             	mov    0x8(%ebp),%eax
-  1015b9:	83 c0 14             	add    $0x14,%eax
-  1015bc:	83 ec 08             	sub    $0x8,%esp
-  1015bf:	6a 60                	push   $0x60
-  1015c1:	50                   	push   %eax
-  1015c2:	e8 13 f1 ff ff       	call   1006da <_ZN8Port8Bit5WriteEh>
-  1015c7:	83 c4 10             	add    $0x10,%esp
-  1015ca:	8b 45 08             	mov    0x8(%ebp),%eax
-  1015cd:	8d 50 0c             	lea    0xc(%eax),%edx
-  1015d0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
-  1015d4:	83 ec 08             	sub    $0x8,%esp
-  1015d7:	50                   	push   %eax
-  1015d8:	52                   	push   %edx
-  1015d9:	e8 fc f0 ff ff       	call   1006da <_ZN8Port8Bit5WriteEh>
-  1015de:	83 c4 10             	add    $0x10,%esp
-  1015e1:	8b 45 08             	mov    0x8(%ebp),%eax
-  1015e4:	83 c0 0c             	add    $0xc,%eax
-  1015e7:	83 ec 08             	sub    $0x8,%esp
-  1015ea:	68 f4 00 00 00       	push   $0xf4
-  1015ef:	50                   	push   %eax
-  1015f0:	e8 e5 f0 ff ff       	call   1006da <_ZN8Port8Bit5WriteEh>
-  1015f5:	83 c4 10             	add    $0x10,%esp
-  1015f8:	90                   	nop
-  1015f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1015fc:	c9                   	leave  
-  1015fd:	c3                   	ret    
-
-001015fe <_ZN14KeyboardDriverD1Ev>:
-  1015fe:	55                   	push   %ebp
-  1015ff:	89 e5                	mov    %esp,%ebp
-  101601:	53                   	push   %ebx
-  101602:	83 ec 04             	sub    $0x4,%esp
-  101605:	e8 7d ed ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  10160a:	81 c3 66 07 00 00    	add    $0x766,%ebx
-  101610:	8d 93 5c 00 00 00    	lea    0x5c(%ebx),%edx
-  101616:	8b 45 08             	mov    0x8(%ebp),%eax
-  101619:	89 10                	mov    %edx,(%eax)
-  10161b:	8b 45 08             	mov    0x8(%ebp),%eax
-  10161e:	83 c0 14             	add    $0x14,%eax
-  101621:	83 ec 0c             	sub    $0xc,%esp
-  101624:	50                   	push   %eax
-  101625:	e8 86 f0 ff ff       	call   1006b0 <_ZN8Port8BitD1Ev>
-  10162a:	83 c4 10             	add    $0x10,%esp
-  10162d:	8b 45 08             	mov    0x8(%ebp),%eax
-  101630:	83 c0 0c             	add    $0xc,%eax
-  101633:	83 ec 0c             	sub    $0xc,%esp
-  101636:	50                   	push   %eax
-  101637:	e8 74 f0 ff ff       	call   1006b0 <_ZN8Port8BitD1Ev>
-  10163c:	83 c4 10             	add    $0x10,%esp
-  10163f:	8b 45 08             	mov    0x8(%ebp),%eax
-  101642:	83 ec 0c             	sub    $0xc,%esp
-  101645:	50                   	push   %eax
-  101646:	e8 bd f4 ff ff       	call   100b08 <_ZN16InterruptHandlerD1Ev>
-  10164b:	83 c4 10             	add    $0x10,%esp
-  10164e:	90                   	nop
-  10164f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  101652:	c9                   	leave  
-  101653:	c3                   	ret    
-
-00101654 <_ZN14KeyboardDriver15HandleInterruptEj>:
-  101654:	55                   	push   %ebp
-  101655:	89 e5                	mov    %esp,%ebp
-  101657:	53                   	push   %ebx
-  101658:	83 ec 14             	sub    $0x14,%esp
-  10165b:	e8 27 ed ff ff       	call   100387 <__x86.get_pc_thunk.bx>
-  101660:	81 c3 10 07 00 00    	add    $0x710,%ebx
-  101666:	8b 45 08             	mov    0x8(%ebp),%eax
-  101669:	83 c0 0c             	add    $0xc,%eax
-  10166c:	83 ec 0c             	sub    $0xc,%esp
-  10166f:	50                   	push   %eax
-  101670:	e8 8b f0 ff ff       	call   100700 <_ZN8Port8Bit4ReadEv>
-  101675:	83 c4 10             	add    $0x10,%esp
-  101678:	88 45 f7             	mov    %al,-0x9(%ebp)
-  10167b:	83 ec 0c             	sub    $0xc,%esp
-  10167e:	8d 83 f5 f9 ff ff    	lea    -0x60b(%ebx),%eax
-  101684:	50                   	push   %eax
-  101685:	e8 97 e9 ff ff       	call   100021 <_Z6printfPKc>
-  10168a:	83 c4 10             	add    $0x10,%esp
-  10168d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
-  101691:	83 ec 0c             	sub    $0xc,%esp
-  101694:	50                   	push   %eax
-  101695:	e8 72 eb ff ff       	call   10020c <_Z9printfHexh>
-  10169a:	83 c4 10             	add    $0x10,%esp
-  10169d:	8b 45 0c             	mov    0xc(%ebp),%eax
-  1016a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  1016a3:	c9                   	leave  
-  1016a4:	c3                   	ret    
-  1016a5:	66 90                	xchg   %ax,%ax
-  1016a7:	90                   	nop
-  1016a8:	30 30                	xor    %dh,(%eax)
-  1016aa:	00 30                	add    %dh,(%eax)
-  1016ac:	31 32                	xor    %esi,(%edx)
-  1016ae:	33 34 35 36 37 38 39 	xor    0x39383736(,%esi,1),%esi
-  1016b5:	41                   	inc    %ecx
-  1016b6:	42                   	inc    %edx
-  1016b7:	43                   	inc    %ebx
-  1016b8:	44                   	inc    %esp
-  1016b9:	45                   	inc    %ebp
-  1016ba:	46                   	inc    %esi
-  1016bb:	00 30                	add    %dh,(%eax)
-  1016bd:	78 00                	js     1016bf <_ZN14KeyboardDriver15HandleInterruptEj+0x6b>
-  1016bf:	0a 00                	or     (%eax),%al
-  1016c1:	00 00                	add    %al,(%eax)
-  1016c3:	00 3d 3d 3d 3d 3d    	add    %bh,0x3d3d3d3d
-  1016c9:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016ce:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016d3:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016d8:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016dd:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016e2:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016e7:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016ec:	3d 3d 3d 3d 3d       	cmp    $0x3d3d3d3d,%eax
-  1016f1:	3d 3d 0a 00 00       	cmp    $0xa3d,%eax
-  1016f6:	00 00                	add    %al,(%eax)
-  1016f8:	20 20                	and    %ah,(%eax)
-  1016fa:	20 57 65             	and    %dl,0x65(%edi)
-  1016fd:	6c                   	insb   (%dx),%es:(%edi)
-  1016fe:	63 6f 6d             	arpl   %bp,0x6d(%edi)
-  101701:	65 20 74 6f 20       	and    %dh,%gs:0x20(%edi,%ebp,2)
-  101706:	44                   	inc    %esp
-  101707:	79 73                	jns    10177c <_ZN14KeyboardDriver15HandleInterruptEj+0x128>
-  101709:	4f                   	dec    %edi
-  10170a:	53                   	push   %ebx
-  10170b:	20 2d 20 54 68 65    	and    %ch,0x65685420
-  101711:	20 55 6c             	and    %dl,0x6c(%ebp)
-  101714:	74 69                	je     10177f <_ZN14KeyboardDriver15HandleInterruptEj+0x12b>
-  101716:	6d                   	insl   (%dx),%es:(%edi)
-  101717:	61                   	popa   
-  101718:	74 65                	je     10177f <_ZN14KeyboardDriver15HandleInterruptEj+0x12b>
-  10171a:	20 33                	and    %dh,(%ebx)
-  10171c:	32 2d 62 69 74 20    	xor    0x20746962,%ch
-  101722:	4f                   	dec    %edi
-  101723:	53                   	push   %ebx
-  101724:	21 20                	and    %esp,(%eax)
-  101726:	20 0a                	and    %cl,(%edx)
-  101728:	00 00                	add    %al,(%eax)
-  10172a:	00 00                	add    %al,(%eax)
-  10172c:	20 20                	and    %ah,(%eax)
-  10172e:	20 20                	and    %ah,(%eax)
-  101730:	20 20                	and    %ah,(%eax)
-  101732:	41                   	inc    %ecx
-  101733:	6e                   	outsb  %ds:(%esi),(%dx)
-  101734:	20 6f 70             	and    %ch,0x70(%edi)
-  101737:	65 72 61             	gs jb  10179b <_ZN14KeyboardDriver15HandleInterruptEj+0x147>
-  10173a:	74 69                	je     1017a5 <_ZN14KeyboardDriver15HandleInterruptEj+0x151>
-  10173c:	6e                   	outsb  %ds:(%esi),(%dx)
-  10173d:	67 20 73 79          	and    %dh,0x79(%bp,%di)
-  101741:	73 74                	jae    1017b7 <_ZN14KeyboardDriver15HandleInterruptEj+0x163>
-  101743:	65 6d                	gs insl (%dx),%es:(%edi)
-  101745:	20 62 79             	and    %ah,0x79(%edx)
-  101748:	20 44 79 73          	and    %al,0x73(%ecx,%edi,2)
-  10174c:	20 0a                	and    %cl,(%edx)
-  10174e:	00 55 4e             	add    %dl,0x4e(%ebp)
-  101751:	48                   	dec    %eax
-  101752:	41                   	inc    %ecx
-  101753:	4e                   	dec    %esi
-  101754:	44                   	inc    %esp
-  101755:	4c                   	dec    %esp
-  101756:	45                   	inc    %ebp
-  101757:	44                   	inc    %esp
-  101758:	20 49 4e             	and    %cl,0x4e(%ecx)
-  10175b:	54                   	push   %esp
-  10175c:	45                   	inc    %ebp
-  10175d:	52                   	push   %edx
-  10175e:	52                   	push   %edx
-  10175f:	55                   	push   %ebp
-  101760:	50                   	push   %eax
-  101761:	54                   	push   %esp
-  101762:	3a 20                	cmp    (%eax),%ah
-  101764:	00 4b 45             	add    %cl,0x45(%ebx)
-  101767:	59                   	pop    %ecx
-  101768:	42                   	inc    %edx
-  101769:	4f                   	dec    %edi
-  10176a:	41                   	inc    %ecx
-  10176b:	52                   	push   %edx
-  10176c:	44                   	inc    %esp
-  10176d:	3a 20                	cmp    (%eax),%ah
-	...
-
-Disassembly of section .eh_frame:
-
-00101770 <.eh_frame>:
-  101770:	14 00                	adc    $0x0,%al
-  101772:	00 00                	add    %al,(%eax)
-  101774:	00 00                	add    %al,(%eax)
-  101776:	00 00                	add    %al,(%eax)
-  101778:	01 7a 52             	add    %edi,0x52(%edx)
-  10177b:	00 01                	add    %al,(%ecx)
-  10177d:	7c 08                	jl     101787 <_ZN14KeyboardDriver15HandleInterruptEj+0x133>
-  10177f:	01 1b                	add    %ebx,(%ebx)
-  101781:	0c 04                	or     $0x4,%al
-  101783:	04 88                	add    $0x88,%al
-  101785:	01 00                	add    %eax,(%eax)
-  101787:	00 20                	add    %ah,(%eax)
-  101789:	00 00                	add    %al,(%eax)
-  10178b:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  10178e:	00 00                	add    %al,(%eax)
-  101790:	91                   	xchg   %eax,%ecx
-  101791:	e8 ff ff eb 01       	call   1fc1795 <_ZN16InterruptManager22ActiveInterruptManagerE+0x1cbf195>
-  101796:	00 00                	add    %al,(%eax)
-  101798:	00 41 0e             	add    %al,0xe(%ecx)
-  10179b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1017a1:	44                   	inc    %esp
-  1017a2:	83 03 03             	addl   $0x3,(%ebx)
-  1017a5:	e3 01                	jecxz  1017a8 <_ZN14KeyboardDriver15HandleInterruptEj+0x154>
-  1017a7:	c5 c3 0c             	(bad)
-  1017aa:	04 04                	add    $0x4,%al
-  1017ac:	1c 00                	sbb    $0x0,%al
-  1017ae:	00 00                	add    %al,(%eax)
-  1017b0:	40                   	inc    %eax
-  1017b1:	00 00                	add    %al,(%eax)
-  1017b3:	00 58 ea             	add    %bl,-0x16(%eax)
-  1017b6:	ff                   	(bad)  
-  1017b7:	ff                   	(bad)  
-  1017b8:	7a 00                	jp     1017ba <_ZN14KeyboardDriver15HandleInterruptEj+0x166>
-  1017ba:	00 00                	add    %al,(%eax)
-  1017bc:	00 41 0e             	add    %al,0xe(%ecx)
-  1017bf:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1017c5:	02 76 c5             	add    -0x3b(%esi),%dh
-  1017c8:	0c 04                	or     $0x4,%al
-  1017ca:	04 00                	add    $0x0,%al
-  1017cc:	20 00                	and    %al,(%eax)
-  1017ce:	00 00                	add    %al,(%eax)
-  1017d0:	60                   	pusha  
-  1017d1:	00 00                	add    %al,(%eax)
-  1017d3:	00 b2 ea ff ff 3a    	add    %dh,0x3affffea(%edx)
-  1017d9:	00 00                	add    %al,(%eax)
-  1017db:	00 00                	add    %al,(%eax)
-  1017dd:	41                   	inc    %ecx
-  1017de:	0e                   	push   %cs
-  1017df:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1017e5:	44                   	inc    %esp
-  1017e6:	83 03 72             	addl   $0x72,(%ebx)
-  1017e9:	c5 c3 0c             	(bad)
-  1017ec:	04 04                	add    $0x4,%al
-  1017ee:	00 00                	add    %al,(%eax)
-  1017f0:	18 00                	sbb    %al,(%eax)
-  1017f2:	00 00                	add    %al,(%eax)
-  1017f4:	84 00                	test   %al,(%eax)
-  1017f6:	00 00                	add    %al,(%eax)
-  1017f8:	c8 ea ff ff          	enter  $0xffea,$0xff
-  1017fc:	c3                   	ret    
-  1017fd:	00 00                	add    %al,(%eax)
-  1017ff:	00 00                	add    %al,(%eax)
-  101801:	41                   	inc    %ecx
-  101802:	0e                   	push   %cs
-  101803:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101809:	47                   	inc    %edi
-  10180a:	83 03 10             	addl   $0x10,(%ebx)
-  10180d:	00 00                	add    %al,(%eax)
-  10180f:	00 a0 00 00 00 6f    	add    %ah,0x6f000000(%eax)
-  101815:	eb ff                	jmp    101816 <_ZN14KeyboardDriver15HandleInterruptEj+0x1c2>
-  101817:	ff 04 00             	incl   (%eax,%eax,1)
-  10181a:	00 00                	add    %al,(%eax)
-  10181c:	00 00                	add    %al,(%eax)
-  10181e:	00 00                	add    %al,(%eax)
-  101820:	10 00                	adc    %al,(%eax)
-  101822:	00 00                	add    %al,(%eax)
-  101824:	b4 00                	mov    $0x0,%ah
-  101826:	00 00                	add    %al,(%eax)
-  101828:	5f                   	pop    %edi
-  101829:	eb ff                	jmp    10182a <_ZN14KeyboardDriver15HandleInterruptEj+0x1d6>
-  10182b:	ff 04 00             	incl   (%eax,%eax,1)
-  10182e:	00 00                	add    %al,(%eax)
-  101830:	00 00                	add    %al,(%eax)
-  101832:	00 00                	add    %al,(%eax)
-  101834:	1c 00                	sbb    $0x0,%al
-  101836:	00 00                	add    %al,(%eax)
-  101838:	c8 00 00 00          	enter  $0x0,$0x0
-  10183c:	50                   	push   %eax
-  10183d:	eb ff                	jmp    10183e <_ZN14KeyboardDriver15HandleInterruptEj+0x1ea>
-  10183f:	ff 86 00 00 00 00    	incl   0x0(%esi)
-  101845:	41                   	inc    %ecx
-  101846:	0e                   	push   %cs
-  101847:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10184d:	02 82 c5 0c 04 04    	add    0x4040cc5(%edx),%al
-  101853:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101856:	00 00                	add    %al,(%eax)
-  101858:	e8 00 00 00 b6       	call   b610185d <MAGIC+0x9a62685b>
-  10185d:	eb ff                	jmp    10185e <_ZN14KeyboardDriver15HandleInterruptEj+0x20a>
-  10185f:	ff 10                	call   *(%eax)
-  101861:	00 00                	add    %al,(%eax)
-  101863:	00 00                	add    %al,(%eax)
-  101865:	41                   	inc    %ecx
-  101866:	0e                   	push   %cs
-  101867:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10186d:	4c                   	dec    %esp
-  10186e:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101871:	04 00                	add    $0x0,%al
-  101873:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101876:	00 00                	add    %al,(%eax)
-  101878:	08 01                	or     %al,(%ecx)
-  10187a:	00 00                	add    %al,(%eax)
-  10187c:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
-  10187d:	eb ff                	jmp    10187e <_ZN14KeyboardDriver15HandleInterruptEj+0x22a>
-  10187f:	ff 14 00             	call   *(%eax,%eax,1)
-  101882:	00 00                	add    %al,(%eax)
-  101884:	00 41 0e             	add    %al,0xe(%ecx)
-  101887:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10188d:	50                   	push   %eax
-  10188e:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101891:	04 00                	add    $0x0,%al
-  101893:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101896:	00 00                	add    %al,(%eax)
-  101898:	28 01                	sub    %al,(%ecx)
-  10189a:	00 00                	add    %al,(%eax)
-  10189c:	9a eb ff ff 14 00 00 	lcall  $0x0,$0x14ffffeb
-  1018a3:	00 00                	add    %al,(%eax)
-  1018a5:	41                   	inc    %ecx
-  1018a6:	0e                   	push   %cs
-  1018a7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1018ad:	50                   	push   %eax
-  1018ae:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  1018b1:	04 00                	add    $0x0,%al
-  1018b3:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  1018b6:	00 00                	add    %al,(%eax)
-  1018b8:	48                   	dec    %eax
-  1018b9:	01 00                	add    %eax,(%eax)
-  1018bb:	00 8e eb ff ff dc    	add    %cl,-0x23000015(%esi)
-  1018c1:	00 00                	add    %al,(%eax)
-  1018c3:	00 00                	add    %al,(%eax)
-  1018c5:	41                   	inc    %ecx
-  1018c6:	0e                   	push   %cs
-  1018c7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1018cd:	02 d8                	add    %al,%bl
-  1018cf:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  1018d2:	04 00                	add    $0x0,%al
-  1018d4:	1c 00                	sbb    $0x0,%al
-  1018d6:	00 00                	add    %al,(%eax)
-  1018d8:	68 01 00 00 4a       	push   $0x4a000001
-  1018dd:	ec                   	in     (%dx),%al
-  1018de:	ff                   	(bad)  
-  1018df:	ff 75 00             	push   0x0(%ebp)
-  1018e2:	00 00                	add    %al,(%eax)
-  1018e4:	00 41 0e             	add    %al,0xe(%ecx)
-  1018e7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1018ed:	02 71 c5             	add    -0x3b(%ecx),%dh
-  1018f0:	0c 04                	or     $0x4,%al
-  1018f2:	04 00                	add    $0x0,%al
-  1018f4:	1c 00                	sbb    $0x0,%al
-  1018f6:	00 00                	add    %al,(%eax)
-  1018f8:	88 01                	mov    %al,(%ecx)
-  1018fa:	00 00                	add    %al,(%eax)
-  1018fc:	a0 ec ff ff 82       	mov    0x82ffffec,%al
-  101901:	00 00                	add    %al,(%eax)
-  101903:	00 00                	add    %al,(%eax)
-  101905:	41                   	inc    %ecx
-  101906:	0e                   	push   %cs
-  101907:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10190d:	02 7e c5             	add    -0x3b(%esi),%bh
-  101910:	0c 04                	or     $0x4,%al
-  101912:	04 00                	add    $0x0,%al
-  101914:	1c 00                	sbb    $0x0,%al
-  101916:	00 00                	add    %al,(%eax)
-  101918:	a8 01                	test   $0x1,%al
-  10191a:	00 00                	add    %al,(%eax)
-  10191c:	02 ed                	add    %ch,%ch
-  10191e:	ff                   	(bad)  
-  10191f:	ff 10                	call   *(%eax)
-  101921:	00 00                	add    %al,(%eax)
-  101923:	00 00                	add    %al,(%eax)
-  101925:	41                   	inc    %ecx
-  101926:	0e                   	push   %cs
-  101927:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10192d:	4c                   	dec    %esp
-  10192e:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101931:	04 00                	add    $0x0,%al
-  101933:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101936:	00 00                	add    %al,(%eax)
-  101938:	c8 01 00 00          	enter  $0x1,$0x0
-  10193c:	f2 ec                	repnz in (%dx),%al
-  10193e:	ff                   	(bad)  
-  10193f:	ff 10                	call   *(%eax)
-  101941:	00 00                	add    %al,(%eax)
-  101943:	00 00                	add    %al,(%eax)
-  101945:	41                   	inc    %ecx
-  101946:	0e                   	push   %cs
-  101947:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10194d:	4c                   	dec    %esp
-  10194e:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101951:	04 00                	add    $0x0,%al
-  101953:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101956:	00 00                	add    %al,(%eax)
-  101958:	e8 01 00 00 e2       	call   e210195e <MAGIC+0xc662695c>
-  10195d:	ec                   	in     (%dx),%al
-  10195e:	ff                   	(bad)  
-  10195f:	ff 24 00             	jmp    *(%eax,%eax,1)
-  101962:	00 00                	add    %al,(%eax)
-  101964:	00 41 0e             	add    %al,0xe(%ecx)
-  101967:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10196d:	60                   	pusha  
-  10196e:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101971:	04 00                	add    $0x0,%al
-  101973:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101976:	00 00                	add    %al,(%eax)
-  101978:	08 02                	or     %al,(%edx)
-  10197a:	00 00                	add    %al,(%eax)
-  10197c:	e6 ec                	out    %al,$0xec
-  10197e:	ff                   	(bad)  
-  10197f:	ff 10                	call   *(%eax)
-  101981:	00 00                	add    %al,(%eax)
-  101983:	00 00                	add    %al,(%eax)
-  101985:	41                   	inc    %ecx
-  101986:	0e                   	push   %cs
-  101987:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  10198d:	4c                   	dec    %esp
-  10198e:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101991:	04 00                	add    $0x0,%al
-  101993:	00 20                	add    %ah,(%eax)
-  101995:	00 00                	add    %al,(%eax)
-  101997:	00 28                	add    %ch,(%eax)
-  101999:	02 00                	add    (%eax),%al
-  10199b:	00 d6                	add    %dl,%dh
-  10199d:	ec                   	in     (%dx),%al
-  10199e:	ff                   	(bad)  
-  10199f:	ff                   	(bad)  
-  1019a0:	3e 00 00             	add    %al,%ds:(%eax)
-  1019a3:	00 00                	add    %al,(%eax)
-  1019a5:	41                   	inc    %ecx
-  1019a6:	0e                   	push   %cs
-  1019a7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1019ad:	44                   	inc    %esp
-  1019ae:	83 03 76             	addl   $0x76,(%ebx)
-  1019b1:	c5 c3 0c             	(bad)
-  1019b4:	04 04                	add    $0x4,%al
-  1019b6:	00 00                	add    %al,(%eax)
-  1019b8:	1c 00                	sbb    $0x0,%al
-  1019ba:	00 00                	add    %al,(%eax)
-  1019bc:	4c                   	dec    %esp
-  1019bd:	02 00                	add    (%eax),%al
-  1019bf:	00 f0                	add    %dh,%al
-  1019c1:	ec                   	in     (%dx),%al
-  1019c2:	ff                   	(bad)  
-  1019c3:	ff 2a                	ljmp   *(%edx)
-  1019c5:	00 00                	add    %al,(%eax)
-  1019c7:	00 00                	add    %al,(%eax)
-  1019c9:	41                   	inc    %ecx
-  1019ca:	0e                   	push   %cs
-  1019cb:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1019d1:	66 c5 0c 04          	lds    (%esp,%eax,1),%cx
-  1019d5:	04 00                	add    $0x0,%al
-  1019d7:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  1019da:	00 00                	add    %al,(%eax)
-  1019dc:	6c                   	insb   (%dx),%es:(%edi)
-  1019dd:	02 00                	add    (%eax),%al
-  1019df:	00 fa                	add    %bh,%dl
-  1019e1:	ec                   	in     (%dx),%al
-  1019e2:	ff                   	(bad)  
-  1019e3:	ff 25 00 00 00 00    	jmp    *0x0
-  1019e9:	41                   	inc    %ecx
-  1019ea:	0e                   	push   %cs
-  1019eb:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  1019f1:	61                   	popa   
-  1019f2:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  1019f5:	04 00                	add    $0x0,%al
-  1019f7:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  1019fa:	00 00                	add    %al,(%eax)
-  1019fc:	8c 02                	mov    %es,(%edx)
-  1019fe:	00 00                	add    %al,(%eax)
-  101a00:	00 ed                	add    %ch,%ch
-  101a02:	ff                   	(bad)  
-  101a03:	ff 23                	jmp    *(%ebx)
-  101a05:	00 00                	add    %al,(%eax)
-  101a07:	00 00                	add    %al,(%eax)
-  101a09:	41                   	inc    %ecx
-  101a0a:	0e                   	push   %cs
-  101a0b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101a11:	5f                   	pop    %edi
-  101a12:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101a15:	04 00                	add    $0x0,%al
-  101a17:	00 20                	add    %ah,(%eax)
-  101a19:	00 00                	add    %al,(%eax)
-  101a1b:	00 ac 02 00 00 04 ed 	add    %ch,-0x12fc0000(%edx,%eax,1)
-  101a22:	ff                   	(bad)  
-  101a23:	ff                   	(bad)  
-  101a24:	3e 00 00             	add    %al,%ds:(%eax)
-  101a27:	00 00                	add    %al,(%eax)
-  101a29:	41                   	inc    %ecx
-  101a2a:	0e                   	push   %cs
-  101a2b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101a31:	44                   	inc    %esp
-  101a32:	83 03 76             	addl   $0x76,(%ebx)
-  101a35:	c5 c3 0c             	(bad)
-  101a38:	04 04                	add    $0x4,%al
-  101a3a:	00 00                	add    %al,(%eax)
-  101a3c:	1c 00                	sbb    $0x0,%al
-  101a3e:	00 00                	add    %al,(%eax)
-  101a40:	d0 02                	rolb   (%edx)
-  101a42:	00 00                	add    %al,(%eax)
-  101a44:	1e                   	push   %ds
-  101a45:	ed                   	in     (%dx),%eax
-  101a46:	ff                   	(bad)  
-  101a47:	ff 2a                	ljmp   *(%edx)
-  101a49:	00 00                	add    %al,(%eax)
-  101a4b:	00 00                	add    %al,(%eax)
-  101a4d:	41                   	inc    %ecx
-  101a4e:	0e                   	push   %cs
-  101a4f:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101a55:	66 c5 0c 04          	lds    (%esp,%eax,1),%cx
-  101a59:	04 00                	add    $0x0,%al
-  101a5b:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101a5e:	00 00                	add    %al,(%eax)
-  101a60:	f0 02 00             	lock add (%eax),%al
-  101a63:	00 28                	add    %ch,(%eax)
-  101a65:	ed                   	in     (%dx),%eax
-  101a66:	ff                   	(bad)  
-  101a67:	ff 27                	jmp    *(%edi)
-  101a69:	00 00                	add    %al,(%eax)
-  101a6b:	00 00                	add    %al,(%eax)
-  101a6d:	41                   	inc    %ecx
-  101a6e:	0e                   	push   %cs
-  101a6f:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101a75:	63 c5                	arpl   %ax,%bp
-  101a77:	0c 04                	or     $0x4,%al
-  101a79:	04 00                	add    $0x0,%al
-  101a7b:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101a7e:	00 00                	add    %al,(%eax)
-  101a80:	10 03                	adc    %al,(%ebx)
-  101a82:	00 00                	add    %al,(%eax)
-  101a84:	30 ed                	xor    %ch,%ch
-  101a86:	ff                   	(bad)  
-  101a87:	ff 25 00 00 00 00    	jmp    *0x0
-  101a8d:	41                   	inc    %ecx
-  101a8e:	0e                   	push   %cs
-  101a8f:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101a95:	61                   	popa   
-  101a96:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101a99:	04 00                	add    $0x0,%al
-  101a9b:	00 20                	add    %ah,(%eax)
-  101a9d:	00 00                	add    %al,(%eax)
-  101a9f:	00 30                	add    %dh,(%eax)
-  101aa1:	03 00                	add    (%eax),%eax
-  101aa3:	00 36                	add    %dh,(%esi)
-  101aa5:	ed                   	in     (%dx),%eax
-  101aa6:	ff                   	(bad)  
-  101aa7:	ff                   	(bad)  
-  101aa8:	3e 00 00             	add    %al,%ds:(%eax)
-  101aab:	00 00                	add    %al,(%eax)
-  101aad:	41                   	inc    %ecx
-  101aae:	0e                   	push   %cs
-  101aaf:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101ab5:	44                   	inc    %esp
-  101ab6:	83 03 76             	addl   $0x76,(%ebx)
-  101ab9:	c5 c3 0c             	(bad)
-  101abc:	04 04                	add    $0x4,%al
-  101abe:	00 00                	add    %al,(%eax)
-  101ac0:	1c 00                	sbb    $0x0,%al
-  101ac2:	00 00                	add    %al,(%eax)
-  101ac4:	54                   	push   %esp
-  101ac5:	03 00                	add    (%eax),%eax
-  101ac7:	00 50 ed             	add    %dl,-0x13(%eax)
-  101aca:	ff                   	(bad)  
-  101acb:	ff 2a                	ljmp   *(%edx)
-  101acd:	00 00                	add    %al,(%eax)
-  101acf:	00 00                	add    %al,(%eax)
-  101ad1:	41                   	inc    %ecx
-  101ad2:	0e                   	push   %cs
-  101ad3:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101ad9:	66 c5 0c 04          	lds    (%esp,%eax,1),%cx
-  101add:	04 00                	add    $0x0,%al
-  101adf:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101ae2:	00 00                	add    %al,(%eax)
-  101ae4:	74 03                	je     101ae9 <_ZN14KeyboardDriver15HandleInterruptEj+0x495>
-  101ae6:	00 00                	add    %al,(%eax)
-  101ae8:	5a                   	pop    %edx
-  101ae9:	ed                   	in     (%dx),%eax
-  101aea:	ff                   	(bad)  
-  101aeb:	ff 1b                	lcall  *(%ebx)
-  101aed:	00 00                	add    %al,(%eax)
-  101aef:	00 00                	add    %al,(%eax)
-  101af1:	41                   	inc    %ecx
-  101af2:	0e                   	push   %cs
-  101af3:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101af9:	57                   	push   %edi
-  101afa:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101afd:	04 00                	add    $0x0,%al
-  101aff:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101b02:	00 00                	add    %al,(%eax)
-  101b04:	94                   	xchg   %eax,%esp
-  101b05:	03 00                	add    (%eax),%eax
-  101b07:	00 56 ed             	add    %dl,-0x13(%esi)
-  101b0a:	ff                   	(bad)  
-  101b0b:	ff 22                	jmp    *(%edx)
-  101b0d:	00 00                	add    %al,(%eax)
-  101b0f:	00 00                	add    %al,(%eax)
-  101b11:	41                   	inc    %ecx
-  101b12:	0e                   	push   %cs
-  101b13:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101b19:	5e                   	pop    %esi
-  101b1a:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101b1d:	04 00                	add    $0x0,%al
-  101b1f:	00 20                	add    %ah,(%eax)
-  101b21:	00 00                	add    %al,(%eax)
-  101b23:	00 b4 03 00 00 58 ed 	add    %dh,-0x12a80000(%ebx,%eax,1)
-  101b2a:	ff                   	(bad)  
-  101b2b:	ff                   	(bad)  
-  101b2c:	3e 00 00             	add    %al,%ds:(%eax)
-  101b2f:	00 00                	add    %al,(%eax)
-  101b31:	41                   	inc    %ecx
-  101b32:	0e                   	push   %cs
-  101b33:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101b39:	44                   	inc    %esp
-  101b3a:	83 03 76             	addl   $0x76,(%ebx)
-  101b3d:	c5 c3 0c             	(bad)
-  101b40:	04 04                	add    $0x4,%al
-  101b42:	00 00                	add    %al,(%eax)
-  101b44:	1c 00                	sbb    $0x0,%al
-  101b46:	00 00                	add    %al,(%eax)
-  101b48:	d8 03                	fadds  (%ebx)
-  101b4a:	00 00                	add    %al,(%eax)
-  101b4c:	72 ed                	jb     101b3b <_ZN14KeyboardDriver15HandleInterruptEj+0x4e7>
-  101b4e:	ff                   	(bad)  
-  101b4f:	ff 2a                	ljmp   *(%edx)
-  101b51:	00 00                	add    %al,(%eax)
-  101b53:	00 00                	add    %al,(%eax)
-  101b55:	41                   	inc    %ecx
-  101b56:	0e                   	push   %cs
-  101b57:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101b5d:	66 c5 0c 04          	lds    (%esp,%eax,1),%cx
-  101b61:	04 00                	add    $0x0,%al
-  101b63:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101b66:	00 00                	add    %al,(%eax)
-  101b68:	f8                   	clc    
-  101b69:	03 00                	add    (%eax),%eax
-  101b6b:	00 7c ed ff          	add    %bh,-0x1(%ebp,%ebp,8)
-  101b6f:	ff 29                	ljmp   *(%ecx)
-  101b71:	00 00                	add    %al,(%eax)
-  101b73:	00 00                	add    %al,(%eax)
-  101b75:	41                   	inc    %ecx
-  101b76:	0e                   	push   %cs
-  101b77:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101b7d:	65 c5 0c 04          	lds    %gs:(%esp,%eax,1),%ecx
-  101b81:	04 00                	add    $0x0,%al
-  101b83:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101b86:	00 00                	add    %al,(%eax)
-  101b88:	18 04 00             	sbb    %al,(%eax,%eax,1)
-  101b8b:	00 38                	add    %bh,(%eax)
-  101b8d:	ef                   	out    %eax,(%dx)
-  101b8e:	ff                   	(bad)  
-  101b8f:	ff 44 00 00          	incl   0x0(%eax,%eax,1)
-  101b93:	00 00                	add    %al,(%eax)
-  101b95:	41                   	inc    %ecx
-  101b96:	0e                   	push   %cs
-  101b97:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101b9d:	02 40 c5             	add    -0x3b(%eax),%al
-  101ba0:	0c 04                	or     $0x4,%al
-  101ba2:	04 00                	add    $0x0,%al
-  101ba4:	1c 00                	sbb    $0x0,%al
-  101ba6:	00 00                	add    %al,(%eax)
-  101ba8:	38 04 00             	cmp    %al,(%eax,%eax,1)
-  101bab:	00 5c ef ff          	add    %bl,-0x1(%edi,%ebp,8)
-  101baf:	ff 4a 00             	decl   0x0(%edx)
-  101bb2:	00 00                	add    %al,(%eax)
-  101bb4:	00 41 0e             	add    %al,0xe(%ecx)
-  101bb7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101bbd:	02 46 c5             	add    -0x3b(%esi),%al
-  101bc0:	0c 04                	or     $0x4,%al
-  101bc2:	04 00                	add    $0x0,%al
-  101bc4:	1c 00                	sbb    $0x0,%al
-  101bc6:	00 00                	add    %al,(%eax)
-  101bc8:	58                   	pop    %eax
-  101bc9:	04 00                	add    $0x0,%al
-  101bcb:	00 86 ef ff ff 12    	add    %al,0x12ffffef(%esi)
-  101bd1:	00 00                	add    %al,(%eax)
-  101bd3:	00 00                	add    %al,(%eax)
-  101bd5:	41                   	inc    %ecx
-  101bd6:	0e                   	push   %cs
-  101bd7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101bdd:	4e                   	dec    %esi
-  101bde:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101be1:	04 00                	add    $0x0,%al
-  101be3:	00 28                	add    %ch,(%eax)
-  101be5:	00 00                	add    %al,(%eax)
-  101be7:	00 78 04             	add    %bh,0x4(%eax)
-  101bea:	00 00                	add    %al,(%eax)
-  101bec:	78 ef                	js     101bdd <_ZN14KeyboardDriver15HandleInterruptEj+0x589>
-  101bee:	ff                   	(bad)  
-  101bef:	ff 9d 00 00 00 00    	lcall  *0x0(%ebp)
-  101bf5:	41                   	inc    %ecx
-  101bf6:	0e                   	push   %cs
-  101bf7:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101bfd:	46                   	inc    %esi
-  101bfe:	87 03                	xchg   %eax,(%ebx)
-  101c00:	86 04 83             	xchg   %al,(%ebx,%eax,4)
-  101c03:	05 02 90 c3 41       	add    $0x41c39002,%eax
-  101c08:	c6 41 c7 41          	movb   $0x41,-0x39(%ecx)
-  101c0c:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101c0f:	04 20                	add    $0x20,%al
-  101c11:	00 00                	add    %al,(%eax)
-  101c13:	00 a4 04 00 00 ea ef 	add    %ah,-0x10160000(%esp,%eax,1)
-  101c1a:	ff                   	(bad)  
-  101c1b:	ff                   	(bad)  
-  101c1c:	eb 06                	jmp    101c24 <_ZN14KeyboardDriver15HandleInterruptEj+0x5d0>
-  101c1e:	00 00                	add    %al,(%eax)
-  101c20:	00 41 0e             	add    %al,0xe(%ecx)
-  101c23:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101c29:	44                   	inc    %esp
-  101c2a:	83 03 03             	addl   $0x3,(%ebx)
-  101c2d:	e3 06                	jecxz  101c35 <_ZN14KeyboardDriver15HandleInterruptEj+0x5e1>
-  101c2f:	c5 c3 0c             	(bad)
-  101c32:	04 04                	add    $0x4,%al
-  101c34:	20 00                	and    %al,(%eax)
-  101c36:	00 00                	add    %al,(%eax)
-  101c38:	c8 04 00 00          	enter  $0x4,$0x0
-  101c3c:	b2 f6                	mov    $0xf6,%dl
-  101c3e:	ff                   	(bad)  
-  101c3f:	ff 76 00             	push   0x0(%esi)
-  101c42:	00 00                	add    %al,(%eax)
-  101c44:	00 41 0e             	add    %al,0xe(%ecx)
-  101c47:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101c4d:	44                   	inc    %esp
-  101c4e:	83 03 02             	addl   $0x2,(%ebx)
-  101c51:	6e                   	outsb  %ds:(%esi),(%dx)
-  101c52:	c5 c3 0c             	(bad)
-  101c55:	04 04                	add    $0x4,%al
-  101c57:	00 1c 00             	add    %bl,(%eax,%eax,1)
-  101c5a:	00 00                	add    %al,(%eax)
-  101c5c:	ec                   	in     (%dx),%al
-  101c5d:	04 00                	add    $0x0,%al
-  101c5f:	00 04 f7             	add    %al,(%edi,%esi,8)
-  101c62:	ff                   	(bad)  
-  101c63:	ff 19                	lcall  *(%ecx)
-  101c65:	00 00                	add    %al,(%eax)
-  101c67:	00 00                	add    %al,(%eax)
-  101c69:	41                   	inc    %ecx
-  101c6a:	0e                   	push   %cs
-  101c6b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101c71:	55                   	push   %ebp
-  101c72:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
-  101c75:	04 00                	add    $0x0,%al
-  101c77:	00 20                	add    %ah,(%eax)
-  101c79:	00 00                	add    %al,(%eax)
-  101c7b:	00 0c 05 00 00 fe f6 	add    %cl,-0x9020000(,%eax,1)
-  101c82:	ff                   	(bad)  
-  101c83:	ff                   	(bad)  
-  101c84:	3e 00 00             	add    %al,%ds:(%eax)
-  101c87:	00 00                	add    %al,(%eax)
-  101c89:	41                   	inc    %ecx
-  101c8a:	0e                   	push   %cs
-  101c8b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101c91:	44                   	inc    %esp
-  101c92:	83 03 76             	addl   $0x76,(%ebx)
-  101c95:	c5 c3 0c             	(bad)
-  101c98:	04 04                	add    $0x4,%al
-  101c9a:	00 00                	add    %al,(%eax)
-  101c9c:	1c 00                	sbb    $0x0,%al
-  101c9e:	00 00                	add    %al,(%eax)
-  101ca0:	30 05 00 00 18 f7    	xor    %al,0xf7180000
-  101ca6:	ff                   	(bad)  
-  101ca7:	ff 26                	jmp    *(%esi)
-  101ca9:	00 00                	add    %al,(%eax)
-  101cab:	00 00                	add    %al,(%eax)
-  101cad:	41                   	inc    %ecx
-  101cae:	0e                   	push   %cs
-  101caf:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101cb5:	62 c5 0c 04 04       	(bad)
-  101cba:	00 00                	add    %al,(%eax)
-  101cbc:	1c 00                	sbb    $0x0,%al
-  101cbe:	00 00                	add    %al,(%eax)
-  101cc0:	50                   	push   %eax
-  101cc1:	05 00 00 1e f7       	add    $0xf71e0000,%eax
-  101cc6:	ff                   	(bad)  
-  101cc7:	ff 41 00             	incl   0x0(%ecx)
-  101cca:	00 00                	add    %al,(%eax)
-  101ccc:	00 41 0e             	add    %al,0xe(%ecx)
-  101ccf:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101cd5:	7d c5                	jge    101c9c <_ZN14KeyboardDriver15HandleInterruptEj+0x648>
-  101cd7:	0c 04                	or     $0x4,%al
-  101cd9:	04 00                	add    $0x0,%al
-  101cdb:	00 20                	add    %ah,(%eax)
-  101cdd:	00 00                	add    %al,(%eax)
-  101cdf:	00 70 05             	add    %dh,0x5(%eax)
-  101ce2:	00 00                	add    %al,(%eax)
-  101ce4:	40                   	inc    %eax
-  101ce5:	f7 ff                	idiv   %edi
-  101ce7:	ff                   	(bad)  
-  101ce8:	bd 00 00 00 00       	mov    $0x0,%ebp
-  101ced:	41                   	inc    %ecx
-  101cee:	0e                   	push   %cs
-  101cef:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101cf5:	44                   	inc    %esp
-  101cf6:	83 03 02             	addl   $0x2,(%ebx)
-  101cf9:	b5 c5                	mov    $0xc5,%ch
-  101cfb:	c3                   	ret    
-  101cfc:	0c 04                	or     $0x4,%al
-  101cfe:	04 00                	add    $0x0,%al
-  101d00:	20 00                	and    %al,(%eax)
-  101d02:	00 00                	add    %al,(%eax)
-  101d04:	94                   	xchg   %eax,%esp
-  101d05:	05 00 00 da f7       	add    $0xf7da0000,%eax
-  101d0a:	ff                   	(bad)  
-  101d0b:	ff 1c 01             	lcall  *(%ecx,%eax,1)
-  101d0e:	00 00                	add    %al,(%eax)
-  101d10:	00 41 0e             	add    %al,0xe(%ecx)
-  101d13:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101d19:	44                   	inc    %esp
-  101d1a:	83 03 03             	addl   $0x3,(%ebx)
-  101d1d:	14 01                	adc    $0x1,%al
-  101d1f:	c5 c3 0c             	(bad)
-  101d22:	04 04                	add    $0x4,%al
-  101d24:	20 00                	and    %al,(%eax)
-  101d26:	00 00                	add    %al,(%eax)
-  101d28:	b8 05 00 00 d2       	mov    $0xd2000005,%eax
-  101d2d:	f8                   	clc    
-  101d2e:	ff                   	(bad)  
-  101d2f:	ff 56 00             	call   *0x0(%esi)
-  101d32:	00 00                	add    %al,(%eax)
-  101d34:	00 41 0e             	add    %al,0xe(%ecx)
-  101d37:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101d3d:	44                   	inc    %esp
-  101d3e:	83 03 02             	addl   $0x2,(%ebx)
-  101d41:	4e                   	dec    %esi
-  101d42:	c5 c3 0c             	(bad)
-  101d45:	04 04                	add    $0x4,%al
-  101d47:	00 20                	add    %ah,(%eax)
-  101d49:	00 00                	add    %al,(%eax)
-  101d4b:	00 dc                	add    %bl,%ah
-  101d4d:	05 00 00 04 f9       	add    $0xf9040000,%eax
-  101d52:	ff                   	(bad)  
-  101d53:	ff 51 00             	call   *0x0(%ecx)
-  101d56:	00 00                	add    %al,(%eax)
-  101d58:	00 41 0e             	add    %al,0xe(%ecx)
-  101d5b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
-  101d61:	44                   	inc    %esp
-  101d62:	83 03 02             	addl   $0x2,(%ebx)
-  101d65:	49                   	dec    %ecx
-  101d66:	c5 c3 0c             	(bad)
-  101d69:	04 04                	add    $0x4,%al
-	...
-
-Disassembly of section .data:
-
-00101d6c <end_ctors>:
-	...
-
-Disassembly of section .got.plt:
-
-00101d70 <_GLOBAL_OFFSET_TABLE_>:
-	...
-
-Disassembly of section .data.rel.ro.local._ZTV12Port8BitSlow:
-
-00101d7c <_ZTV12Port8BitSlow>:
-	...
-  101d84:	e8                   	.byte 0xe8
-  101d85:	08 10                	or     %dl,(%eax)
-	...
-
-Disassembly of section .data.rel.ro.local._ZTV9Port32Bit:
-
-00101d88 <_ZTV9Port32Bit>:
-	...
-  101d90:	42                   	inc    %edx
-  101d91:	08 10                	or     %dl,(%eax)
-  101d93:	00 5e 08             	add    %bl,0x8(%esi)
-  101d96:	10 00                	adc    %al,(%eax)
-
-Disassembly of section .data.rel.ro.local._ZTV9Port16Bit:
-
-00101d98 <_ZTV9Port16Bit>:
-	...
-  101da0:	8c 07                	mov    %es,(%edi)
-  101da2:	10 00                	adc    %al,(%eax)
-  101da4:	b4 07                	mov    $0x7,%ah
-  101da6:	10 00                	adc    %al,(%eax)
-
-Disassembly of section .data.rel.ro.local._ZTV8Port8Bit:
-
-00101da8 <_ZTV8Port8Bit>:
-	...
-  101db0:	da 06                	fiaddl (%esi)
-  101db2:	10 00                	adc    %al,(%eax)
-  101db4:	00 07                	add    %al,(%edi)
-  101db6:	10 00                	adc    %al,(%eax)
-
-Disassembly of section .data.rel.ro.local._ZTV16InterruptHandler:
-
-00101db8 <_ZTV16InterruptHandler>:
-	...
-  101dc0:	52                   	push   %edx
-  101dc1:	0b 10                	or     (%eax),%edx
-	...
-
-Disassembly of section .data.rel.ro.local._ZTV14KeyboardDriver:
-
-00101dc4 <_ZTV14KeyboardDriver>:
-	...
-  101dcc:	54                   	push   %esp
-  101dcd:	16                   	push   %ss
-  101dce:	10 00                	adc    %al,(%eax)
-
-Disassembly of section .bss:
-
-00101de0 <kernel_stack>:
-	...
-
-00301de0 <_ZZ6printfPKcE1x>:
-	...
-
-00301de1 <_ZZ6printfPKcE1y>:
-	...
-
-00301e00 <_ZN16InterruptManager24interruptDescriptorTableE>:
-	...
-
-00302600 <_ZN16InterruptManager22ActiveInterruptManagerE>:
-  302600:	00 00                	add    %al,(%eax)
-	...
diff -ruN /home/dys/Desktop/os_dev/DysOS/debug/gdb.md /home/dys/Desktop/os_dev/wyoos/debug/gdb.md
--- /home/dys/Desktop/os_dev/DysOS/debug/gdb.md	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/debug/gdb.md	1970-01-01 01:00:00.000000000 +0100
@@ -1,56 +0,0 @@
-# GDB Commands for OS Development
-
-## Basic Control
-- `run` or `r` - Start the program
-- `continue` or `c` - Continue execution
-- `next` or `n` - Step over (execute one line)
-- `step` or `s` - Step into (go into function calls)
-- `finish` - Run until current function returns
-- `kill` - Stop the program
-- `quit` or `q` - Exit GDB
-
-## Breakpoints
-- `break function_name` or `b function_name` - Set breakpoint at function
-- `break *0x12345678` - Set breakpoint at memory address
-- `break file.c:123` - Set breakpoint at line
-- `break +5` - Set breakpoint 5 lines ahead
-- `watch variable` - Stop when variable changes
-- `delete 1` - Delete breakpoint number 1
-- `disable 1` - Disable breakpoint number 1
-- `enable 1` - Enable breakpoint number 1
-- `info breakpoints` - List all breakpoints
-
-## Examining State
-- `backtrace` or `bt` - Show call stack
-- `info registers` - Show all registers
-- `info registers eax ebx` - Show specific registers
-- `print variable` or `p variable` - Print variable value
-- `print/x $eax` - Print register in hex
-- `print/d $eax` - Print register in decimal
-- `print/t $eax` - Print register in binary
-- `x/10x $esp` - Examine 10 words at stack pointer (hex)
-- `x/10i $eip` - Disassemble 10 instructions at instruction pointer
-- `info frame` - Info about current stack frame
-- `info locals` - Print local variables
-
-## Memory Inspection
-- `x/10x 0x12345678` - Examine 10 words at address (hex)
-- `x/10i 0x12345678` - Disassemble 10 instructions at address
-- `x/s 0x12345678` - Print string at address
-- `x/b 0x12345678` - Examine byte at address
-- `x/w 0x12345678` - Examine word (4 bytes) at address
-
-## OS-Specific
-- `info gdt` - Show Global Descriptor Table
-- `info idt` - Show Interrupt Descriptor Table
-- `info tss` - Show Task State Segment
-- `info mem` - Show memory regions
-- `info all-registers` - Show all CPU registers
-
-## Miscellaneous
-- `set pagination off` - Disable paging (useful for large outputs)
-- `set disassembly-flavor intel` - Use Intel syntax for disassembly
-- `layout asm` - Show assembly in a window
-- `layout src` - Show source in a window
-- `layout split` - Show both source and assembly
-- `focus cmd` - Focus on command window
\ No newline at end of file
diff -ruN /home/dys/Desktop/os_dev/DysOS/gdt.cpp /home/dys/Desktop/os_dev/wyoos/gdt.cpp
--- /home/dys/Desktop/os_dev/DysOS/gdt.cpp	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/gdt.cpp	2025-04-18 11:31:30.244371541 +0200
@@ -1,78 +1,101 @@
+
 #include "gdt.h"
-#include "size.h"
 
-GlobalDescriptorTable::GlobalDescriptorTable()
-:
-    nullSegmentSelector(0,0,0), 
-    unusedSegementSelector(0,0,0), 
-    codeSegmentSelector(0,64*MB,0x9A),
-    dataSegmentSelector(0,64*MB,0x92){
 
+GlobalDescriptorTable::GlobalDescriptorTable()
+    : nullSegmentSelector(0, 0, 0),
+        unusedSegmentSelector(0, 0, 0),
+        codeSegmentSelector(0, 64*1024*1024, 0x9A),
+        dataSegmentSelector(0, 64*1024*1024, 0x92)
+{
     uint32_t i[2];
-    i[1] = (uint32_t) this;
+    i[1] = (uint32_t)this;
     i[0] = sizeof(GlobalDescriptorTable) << 16;
-
-    asm volatile("lgdt (%0)" :  :"p"(((uint8_t *)i)+2));
-
+    asm volatile("lgdt (%0)": :"p" (((uint8_t *) i)+2));
 }
 
-GlobalDescriptorTable::~GlobalDescriptorTable(){}
+GlobalDescriptorTable::~GlobalDescriptorTable()
+{
+}
 
-uint16_t GlobalDescriptorTable::DataSegmentSelector(){
-    return (uint16_t)((uint8_t*)&dataSegmentSelector - (uint8_t*) this); 
+uint16_t GlobalDescriptorTable::DataSegmentSelector()
+{
+    return (uint8_t*)&dataSegmentSelector - (uint8_t*)this;
 }
 
-uint16_t GlobalDescriptorTable::CodeSegmentSelector(){
+uint16_t GlobalDescriptorTable::CodeSegmentSelector()
+{
     return (uint8_t*)&codeSegmentSelector - (uint8_t*)this;
 }
 
-
-GlobalDescriptorTable::SegmentDescriptor::SegmentDescriptor(uint32_t base, uint32_t limit,uint8_t type)
+GlobalDescriptorTable::SegmentDescriptor::SegmentDescriptor(uint32_t base, uint32_t limit, uint8_t type)
 {
-    uint8_t* target = (uint8_t*) this;
-    if(limit <= 65536){
-        target[6] = 0x40; //bin : 0100 0000
-    }else{
+    uint8_t* target = (uint8_t*)this;
+
+    if (limit <= 65536)
+    {
+        // 16-bit address space
+        target[6] = 0x40;
+    }
+    else
+    {
+        // 32-bit address space
+        // Now we have to squeeze the (32-bit) limit into 2.5 regiters (20-bit).
+        // This is done by discarding the 12 least significant bits, but this
+        // is only legal, if they are all ==1, so they are implicitly still there
+
+        // so if the last bits aren't all 1, we have to set them to 1, but this
+        // would increase the limit (cannot do that, because we might go beyond
+        // the physical limit or get overlap with other segments) so we have to
+        // compensate this by decreasing a higher bit (and might have up to
+        // 4095 wasted bytes behind the used memory)
+
         if((limit & 0xFFF) != 0xFFF)
-            limit = (limit >> 12) - 1;
-        else 
+            limit = (limit >> 12)-1;
+        else
             limit = limit >> 12;
-        target[6] = 0xC0; //bin : 1100 0000
+
+        target[6] = 0xC0;
     }
+
+    // Encode the limit
     target[0] = limit & 0xFF;
     target[1] = (limit >> 8) & 0xFF;
     target[6] |= (limit >> 16) & 0xF;
 
+    // Encode the base
     target[2] = base & 0xFF;
     target[3] = (base >> 8) & 0xFF;
     target[4] = (base >> 16) & 0xFF;
     target[7] = (base >> 24) & 0xFF;
 
+    // Type
     target[5] = type;
-
 }
 
+uint32_t GlobalDescriptorTable::SegmentDescriptor::Base()
+{
+    uint8_t* target = (uint8_t*)this;
 
-uint32_t GlobalDescriptorTable::SegmentDescriptor::Base(){
-    uint8_t* target = (uint8_t*) this;
     uint32_t result = target[7];
     result = (result << 8) + target[4];
     result = (result << 8) + target[3];
     result = (result << 8) + target[2];
 
     return result;
-
 }
 
+uint32_t GlobalDescriptorTable::SegmentDescriptor::Limit()
+{
+    uint8_t* target = (uint8_t*)this;
 
-uint32_t GlobalDescriptorTable::SegmentDescriptor::Limit(){
-    uint8_t* target = (uint8_t*) this;
     uint32_t result = target[6] & 0xF;
     result = (result << 8) + target[1];
     result = (result << 8) + target[0];
+
     if((target[6] & 0xC0) == 0xC0)
         result = (result << 12) | 0xFFF;
 
     return result;
+}
 
-}
\ No newline at end of file
diff -ruN /home/dys/Desktop/os_dev/DysOS/gdt.h /home/dys/Desktop/os_dev/wyoos/gdt.h
--- /home/dys/Desktop/os_dev/DysOS/gdt.h	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/gdt.h	2025-04-18 11:31:30.244371541 +0200
@@ -1,37 +1,41 @@
-    #ifndef __GDT_H
-    #define __GDT_H 
+#ifndef __GDT_H
+#define __GDT_H
 
     #include "types.h"
+    
+    class GlobalDescriptorTable
+    {
+        public:
+
+            class SegmentDescriptor
+            {
+                private:
+                    uint16_t limit_lo;
+                    uint16_t base_lo;
+                    uint8_t base_hi;
+                    uint8_t type;
+                    uint8_t limit_hi;
+                    uint8_t base_vhi;
+
+                public:
+                    SegmentDescriptor(uint32_t base, uint32_t limit, uint8_t type);
+                    uint32_t Base();
+                    uint32_t Limit();
+            } __attribute__((packed));
+
+        private:
+            SegmentDescriptor nullSegmentSelector;
+            SegmentDescriptor unusedSegmentSelector;
+            SegmentDescriptor codeSegmentSelector;
+            SegmentDescriptor dataSegmentSelector;
+
+        public:
+
+            GlobalDescriptorTable();
+            ~GlobalDescriptorTable();
+
+            uint16_t CodeSegmentSelector();
+            uint16_t DataSegmentSelector();
+    };
 
-        class GlobalDescriptorTable{
-            public: 
-                class SegmentDescriptor{
-                    private: 
-                        uint16_t limit_lo; 
-                        uint16_t base_lo;
-                        uint8_t base_hi;
-                        uint8_t type;
-                        uint8_t flags_limit_hi;
-                        uint8_t base_vhi;
-                    public: 
-                        SegmentDescriptor(uint32_t base, uint32_t limit, uint8_t type);
-                        uint32_t Base();
-                        uint32_t Limit();
-                }__attribute__((packed));
-
-
-                SegmentDescriptor nullSegmentSelector;
-                SegmentDescriptor unusedSegementSelector;
-                SegmentDescriptor codeSegmentSelector;
-                SegmentDescriptor dataSegmentSelector;
-            
-            public:
-                GlobalDescriptorTable();
-                ~GlobalDescriptorTable();
-
-                uint16_t CodeSegmentSelector();
-                uint16_t DataSegmentSelector();
-        };
-
-
-    #endif
\ No newline at end of file
+#endif
\ No newline at end of file
Binary files /home/dys/Desktop/os_dev/DysOS/gdt.o and /home/dys/Desktop/os_dev/wyoos/gdt.o differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/config /home/dys/Desktop/os_dev/wyoos/.git/config
--- /home/dys/Desktop/os_dev/DysOS/.git/config	2025-04-17 11:18:55.708627684 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/config	2025-04-18 11:31:04.452091996 +0200
@@ -4,9 +4,8 @@
 	bare = false
 	logallrefupdates = true
 [remote "origin"]
-	url = https://github.com/DYSDEV1/DysOS.git
+	url = https://github.com/AlgorithMan-de/wyoos.git
 	fetch = +refs/heads/*:refs/remotes/origin/*
-[branch "main"]
+[branch "master"]
 	remote = origin
-	merge = refs/heads/main
-	vscode-merge-base = origin/main
+	merge = refs/heads/master
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/FETCH_HEAD /home/dys/Desktop/os_dev/wyoos/.git/FETCH_HEAD
--- /home/dys/Desktop/os_dev/DysOS/.git/FETCH_HEAD	2025-04-18 11:35:58.939124683 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/FETCH_HEAD	2025-04-18 12:55:17.482151658 +0200
@@ -1 +1 @@
-7885fde0c71f76e60e3fe6882f92f9abee47b62a		branch 'main' of https://github.com/DYSDEV1/DysOS
+22bf3f7df7ad8abdb4a49053428f0dd961fffd91	not-for-merge	branch 'master' of https://github.com/AlgorithMan-de/wyoos
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/HEAD /home/dys/Desktop/os_dev/wyoos/.git/HEAD
--- /home/dys/Desktop/os_dev/DysOS/.git/HEAD	2025-04-17 11:18:45.628533662 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/HEAD	2025-04-18 11:31:30.244371541 +0200
@@ -1 +1 @@
-ref: refs/heads/main
+a2f1cad21ae6d66d5730a213e8c654fae5e20dab
Binary files /home/dys/Desktop/os_dev/DysOS/.git/index and /home/dys/Desktop/os_dev/wyoos/.git/index differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/logs/HEAD /home/dys/Desktop/os_dev/wyoos/.git/logs/HEAD
--- /home/dys/Desktop/os_dev/DysOS/.git/logs/HEAD	2025-04-17 11:18:45.628533662 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/logs/HEAD	2025-04-18 11:31:30.244371541 +0200
@@ -1 +1,2 @@
-0000000000000000000000000000000000000000 7885fde0c71f76e60e3fe6882f92f9abee47b62a DYSDEV1 <vianney.lehu@lacatholille.fr> 1744881525 +0200	clone: from https://github.com/DYSDEV1/DysOS.git
+0000000000000000000000000000000000000000 22bf3f7df7ad8abdb4a49053428f0dd961fffd91 DYSDEV1 <vianney.lehu@lacatholille.fr> 1744968664 +0200	clone: from https://github.com/AlgorithMan-de/wyoos.git
+22bf3f7df7ad8abdb4a49053428f0dd961fffd91 a2f1cad21ae6d66d5730a213e8c654fae5e20dab DYSDEV1 <vianney.lehu@lacatholille.fr> 1744968690 +0200	checkout: moving from master to a2f1cad
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/logs/refs/heads/main /home/dys/Desktop/os_dev/wyoos/.git/logs/refs/heads/main
--- /home/dys/Desktop/os_dev/DysOS/.git/logs/refs/heads/main	2025-04-17 11:18:45.628533662 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/logs/refs/heads/main	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 7885fde0c71f76e60e3fe6882f92f9abee47b62a DYSDEV1 <vianney.lehu@lacatholille.fr> 1744881525 +0200	clone: from https://github.com/DYSDEV1/DysOS.git
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/logs/refs/heads/master /home/dys/Desktop/os_dev/wyoos/.git/logs/refs/heads/master
--- /home/dys/Desktop/os_dev/DysOS/.git/logs/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
+++ /home/dys/Desktop/os_dev/wyoos/.git/logs/refs/heads/master	2025-04-18 11:31:04.452091996 +0200
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 22bf3f7df7ad8abdb4a49053428f0dd961fffd91 DYSDEV1 <vianney.lehu@lacatholille.fr> 1744968664 +0200	clone: from https://github.com/AlgorithMan-de/wyoos.git
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/logs/refs/remotes/origin/HEAD /home/dys/Desktop/os_dev/wyoos/.git/logs/refs/remotes/origin/HEAD
--- /home/dys/Desktop/os_dev/DysOS/.git/logs/refs/remotes/origin/HEAD	2025-04-17 11:18:45.628533662 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/logs/refs/remotes/origin/HEAD	2025-04-18 11:31:04.452091996 +0200
@@ -1 +1 @@
-0000000000000000000000000000000000000000 7885fde0c71f76e60e3fe6882f92f9abee47b62a DYSDEV1 <vianney.lehu@lacatholille.fr> 1744881525 +0200	clone: from https://github.com/DYSDEV1/DysOS.git
+0000000000000000000000000000000000000000 22bf3f7df7ad8abdb4a49053428f0dd961fffd91 DYSDEV1 <vianney.lehu@lacatholille.fr> 1744968664 +0200	clone: from https://github.com/AlgorithMan-de/wyoos.git
Binary files /home/dys/Desktop/os_dev/DysOS/.git/objects/pack/pack-52039d6a4e6cf59db908eba51be0a45414dd9bd0.idx and /home/dys/Desktop/os_dev/wyoos/.git/objects/pack/pack-52039d6a4e6cf59db908eba51be0a45414dd9bd0.idx differ
Binary files /home/dys/Desktop/os_dev/DysOS/.git/objects/pack/pack-52039d6a4e6cf59db908eba51be0a45414dd9bd0.pack and /home/dys/Desktop/os_dev/wyoos/.git/objects/pack/pack-52039d6a4e6cf59db908eba51be0a45414dd9bd0.pack differ
Binary files /home/dys/Desktop/os_dev/DysOS/.git/objects/pack/pack-d9143c0dc80982c2fba6ac81e04472f6a53506c1.idx and /home/dys/Desktop/os_dev/wyoos/.git/objects/pack/pack-d9143c0dc80982c2fba6ac81e04472f6a53506c1.idx differ
Binary files /home/dys/Desktop/os_dev/DysOS/.git/objects/pack/pack-d9143c0dc80982c2fba6ac81e04472f6a53506c1.pack and /home/dys/Desktop/os_dev/wyoos/.git/objects/pack/pack-d9143c0dc80982c2fba6ac81e04472f6a53506c1.pack differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/packed-refs /home/dys/Desktop/os_dev/wyoos/.git/packed-refs
--- /home/dys/Desktop/os_dev/DysOS/.git/packed-refs	2025-04-17 11:18:45.628533662 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/packed-refs	2025-04-18 11:31:04.452091996 +0200
@@ -1,2 +1,2 @@
 # pack-refs with: peeled fully-peeled sorted 
-7885fde0c71f76e60e3fe6882f92f9abee47b62a refs/remotes/origin/main
+22bf3f7df7ad8abdb4a49053428f0dd961fffd91 refs/remotes/origin/master
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/refs/heads/main /home/dys/Desktop/os_dev/wyoos/.git/refs/heads/main
--- /home/dys/Desktop/os_dev/DysOS/.git/refs/heads/main	2025-04-17 11:18:45.628533662 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/refs/heads/main	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-7885fde0c71f76e60e3fe6882f92f9abee47b62a
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/refs/heads/master /home/dys/Desktop/os_dev/wyoos/.git/refs/heads/master
--- /home/dys/Desktop/os_dev/DysOS/.git/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
+++ /home/dys/Desktop/os_dev/wyoos/.git/refs/heads/master	2025-04-18 11:31:04.452091996 +0200
@@ -0,0 +1 @@
+22bf3f7df7ad8abdb4a49053428f0dd961fffd91
diff -ruN /home/dys/Desktop/os_dev/DysOS/.git/refs/remotes/origin/HEAD /home/dys/Desktop/os_dev/wyoos/.git/refs/remotes/origin/HEAD
--- /home/dys/Desktop/os_dev/DysOS/.git/refs/remotes/origin/HEAD	2025-04-17 11:18:45.628533662 +0200
+++ /home/dys/Desktop/os_dev/wyoos/.git/refs/remotes/origin/HEAD	2025-04-18 11:31:04.452091996 +0200
@@ -1 +1 @@
-ref: refs/remotes/origin/main
+ref: refs/remotes/origin/master
diff -ruN /home/dys/Desktop/os_dev/DysOS/.gitignore /home/dys/Desktop/os_dev/wyoos/.gitignore
--- /home/dys/Desktop/os_dev/DysOS/.gitignore	1970-01-01 01:00:00.000000000 +0100
+++ /home/dys/Desktop/os_dev/wyoos/.gitignore	2025-04-18 11:31:30.240371498 +0200
@@ -0,0 +1,29 @@
+# Compiled Object files
+*.slo
+*.lo
+*.o
+*.obj
+
+# Precompiled Headers
+*.gch
+*.pch
+
+# Compiled Dynamic libraries
+*.so
+*.dylib
+*.dll
+
+# Fortran module files
+*.mod
+*.smod
+
+# Compiled Static libraries
+*.lai
+*.la
+*.a
+*.lib
+
+# Executables
+*.exe
+*.out
+*.app
diff -ruN /home/dys/Desktop/os_dev/DysOS/interrupts.cpp /home/dys/Desktop/os_dev/wyoos/interrupts.cpp
--- /home/dys/Desktop/os_dev/DysOS/interrupts.cpp	2025-04-18 11:27:34.373677104 +0200
+++ /home/dys/Desktop/os_dev/wyoos/interrupts.cpp	2025-04-18 11:31:30.244371541 +0200
@@ -2,28 +2,44 @@
 #include "interrupts.h"
 
 
-void printf(const char* str);
-void printfHex(uint8_t key);
+void printf(char* str);
 
 
-InterruptHandler::InterruptHandler(InterruptManager* interruptManager, uint8_t interrupt){
-    this->interrupt = interrupt;
+
+
+
+InterruptHandler::InterruptHandler(InterruptManager* interruptManager, uint8_t InterruptNumber)
+{
+    this->InterruptNumber = InterruptNumber;
     this->interruptManager = interruptManager;
-    interruptManager->handlers[interrupt] = this;
+    interruptManager->handlers[InterruptNumber] = this;
 }
-InterruptHandler::~InterruptHandler(){
-    if(interruptManager->handlers[interrupt] == this)
-        interruptManager->handlers[interrupt] = 0;
+
+InterruptHandler::~InterruptHandler()
+{
+    if(interruptManager->handlers[InterruptNumber] == this)
+        interruptManager->handlers[InterruptNumber] = 0;
 }
 
-uint32_t InterruptHandler::HandleInterrupt(uint32_t esp){
+uint32_t InterruptHandler::HandleInterrupt(uint32_t esp)
+{
     return esp;
 }
 
 
+
+
+
+
+
+
+
+
 InterruptManager::GateDescriptor InterruptManager::interruptDescriptorTable[256];
+InterruptManager* InterruptManager::ActiveInterruptManager = 0;
+
+
 
-InterruptManager *InterruptManager::ActiveInterruptManager = 0;
 
 void InterruptManager::SetInterruptDescriptorTableEntry(uint8_t interrupt,
     uint16_t CodeSegment, void (*handler)(), uint8_t DescriptorPrivilegeLevel, uint8_t DescriptorType)
@@ -34,17 +50,17 @@
     interruptDescriptorTable[interrupt].handlerAddressHighBits = (((uint32_t) handler) >> 16) & 0xFFFF;
     interruptDescriptorTable[interrupt].gdt_codeSegmentSelector = CodeSegment;
 
-    const uint8_t IDT_DESC_PRESENT = 0x80; // 0b1000 0000
-    interruptDescriptorTable[interrupt].access = IDT_DESC_PRESENT | ((DescriptorPrivilegeLevel & 0b11) << 5) | DescriptorType;
+    const uint8_t IDT_DESC_PRESENT = 0x80;
+    interruptDescriptorTable[interrupt].access = IDT_DESC_PRESENT | ((DescriptorPrivilegeLevel & 3) << 5) | DescriptorType;
     interruptDescriptorTable[interrupt].reserved = 0;
 }
 
 
 InterruptManager::InterruptManager(uint16_t hardwareInterruptOffset, GlobalDescriptorTable* globalDescriptorTable)
-    : picMasterCommand(0x20),
-      picMasterData(0x21),
-      picSlaveCommand(0xA0),
-      picSlaveData(0xA1)
+    : programmableInterruptControllerMasterCommandPort(0x20),
+      programmableInterruptControllerMasterDataPort(0x21),
+      programmableInterruptControllerSlaveCommandPort(0xA0),
+      programmableInterruptControllerSlaveDataPort(0xA1)
 {
     this->hardwareInterruptOffset = hardwareInterruptOffset;
     uint32_t CodeSegment = globalDescriptorTable->CodeSegmentSelector();
@@ -53,11 +69,11 @@
     for(uint8_t i = 255; i > 0; --i)
     {
         SetInterruptDescriptorTableEntry(i, CodeSegment, &InterruptIgnore, 0, IDT_INTERRUPT_GATE);
-        handlers[i] = nullptr;
+        handlers[i] = 0;
     }
-
-
     SetInterruptDescriptorTableEntry(0, CodeSegment, &InterruptIgnore, 0, IDT_INTERRUPT_GATE);
+    handlers[0] = 0;
+
     SetInterruptDescriptorTableEntry(0x00, CodeSegment, &HandleException0x00, 0, IDT_INTERRUPT_GATE);
     SetInterruptDescriptorTableEntry(0x01, CodeSegment, &HandleException0x01, 0, IDT_INTERRUPT_GATE);
     SetInterruptDescriptorTableEntry(0x02, CodeSegment, &HandleException0x02, 0, IDT_INTERRUPT_GATE);
@@ -95,22 +111,22 @@
     SetInterruptDescriptorTableEntry(hardwareInterruptOffset + 0x0D, CodeSegment, &HandleInterruptRequest0x0D, 0, IDT_INTERRUPT_GATE);
     SetInterruptDescriptorTableEntry(hardwareInterruptOffset + 0x0E, CodeSegment, &HandleInterruptRequest0x0E, 0, IDT_INTERRUPT_GATE);
     SetInterruptDescriptorTableEntry(hardwareInterruptOffset + 0x0F, CodeSegment, &HandleInterruptRequest0x0F, 0, IDT_INTERRUPT_GATE);
-    //init command
-    picMasterCommand.Write(0x11);
-    picSlaveCommand.Write(0x11);
-
-    // remap the PIC master will handle IRQ 0 to 7 + the offset and slave handle IRQ 8 to 15 + offset 
-    picMasterData.Write(hardwareInterruptOffset);
-    picSlaveData.Write(hardwareInterruptOffset+8);
-    //bind master and slave
-    picMasterData.Write(0x04);
-    picSlaveData.Write(0x02);
-    //operate in 8086 mode 
-    picMasterData.Write(0x01);
-    picSlaveData.Write(0x01);
-    //clear interrupt mask ( enable interrupt )
-    picMasterData.Write(0x00);
-    picSlaveData.Write(0x00);
+
+    programmableInterruptControllerMasterCommandPort.Write(0x11);
+    programmableInterruptControllerSlaveCommandPort.Write(0x11);
+
+    // remap
+    programmableInterruptControllerMasterDataPort.Write(hardwareInterruptOffset);
+    programmableInterruptControllerSlaveDataPort.Write(hardwareInterruptOffset+8);
+
+    programmableInterruptControllerMasterDataPort.Write(0x04);
+    programmableInterruptControllerSlaveDataPort.Write(0x02);
+
+    programmableInterruptControllerMasterDataPort.Write(0x01);
+    programmableInterruptControllerSlaveDataPort.Write(0x01);
+
+    programmableInterruptControllerMasterDataPort.Write(0x00);
+    programmableInterruptControllerSlaveDataPort.Write(0x00);
 
     InterruptDescriptorTablePointer idt_pointer;
     idt_pointer.size  = 256*sizeof(GateDescriptor) - 1;
@@ -132,44 +148,64 @@
 {
     if(ActiveInterruptManager != 0)
         ActiveInterruptManager->Deactivate();
-    
+
     ActiveInterruptManager = this;
     asm("sti");
-    
 }
 
 void InterruptManager::Deactivate()
 {
-    if(ActiveInterruptManager == this){
-        ActiveInterruptManager = 0;    
-        asm("cli");     
+    if(ActiveInterruptManager == this)
+    {
+        ActiveInterruptManager = 0;
+        asm("cli");
     }
-    
 }
 
 uint32_t InterruptManager::HandleInterrupt(uint8_t interrupt, uint32_t esp)
 {
-    if(ActiveInterruptManager != 0){
+    if(ActiveInterruptManager != 0)
         return ActiveInterruptManager->DoHandleInterrupt(interrupt, esp);
-    }
     return esp;
 }
 
-    uint32_t InterruptManager::DoHandleInterrupt(uint8_t interrupt, uint32_t esp)
+
+uint32_t InterruptManager::DoHandleInterrupt(uint8_t interrupt, uint32_t esp)
+{
+    if(handlers[interrupt] != 0)
+    {
+        esp = handlers[interrupt]->HandleInterrupt(esp);
+    }
+    else if(interrupt != hardwareInterruptOffset)
+    {
+        char* foo = "UNHANDLED INTERRUPT 0x00";
+        char* hex = "0123456789ABCDEF";
+        foo[22] = hex[(interrupt >> 4) & 0xF];
+        foo[23] = hex[interrupt & 0xF];
+        printf(foo);
+    }
+
+    // hardware interrupts must be acknowledged
+    if(hardwareInterruptOffset <= interrupt && interrupt < hardwareInterruptOffset+16)
     {
-        if(handlers[interrupt] != 0){
-            esp = handlers[interrupt]->HandleInterrupt(esp);
-        }
-        else if(interrupt != 0x20)
-        {
-            printf("UNHANDLED INTERRUPT: ");
-            printfHex(interrupt); 
-            printf("\n");
-        }
-        if(interrupt >= 0x20 && interrupt < 0x30){
-            picMasterCommand.Write(0x20);
-            if(interrupt >= 0x28)
-                picSlaveCommand.Write(0x20);
-        }
-        return esp;
-    }
\ No newline at end of file
+        programmableInterruptControllerMasterCommandPort.Write(0x20);
+        if(hardwareInterruptOffset + 8 <= interrupt)
+            programmableInterruptControllerSlaveCommandPort.Write(0x20);
+    }
+
+    return esp;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff -ruN /home/dys/Desktop/os_dev/DysOS/interrupts.h /home/dys/Desktop/os_dev/wyoos/interrupts.h
--- /home/dys/Desktop/os_dev/DysOS/interrupts.h	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/interrupts.h	2025-04-18 11:31:30.244371541 +0200
@@ -7,21 +7,20 @@
     #include "port.h"
 
 
-    class InterruptManager; //declare it before so that interruptHandler now the class for the ptr 
-
-    class InterruptHandler{
-        protected:
-            uint8_t interrupt;
-            InterruptManager* interruptManager;
-
-            InterruptHandler(InterruptManager* interruptManager, uint8_t interrupt);
-            ~InterruptHandler();
-        
-        public:
-            virtual uint32_t HandleInterrupt(uint32_t esp);
+    class InterruptManager;
 
+    class InterruptHandler
+    {
+    protected:
+        uint8_t InterruptNumber;
+        InterruptManager* interruptManager;
+        InterruptHandler(InterruptManager* interruptManager, uint8_t InterruptNumber);
+        ~InterruptHandler();
+    public:
+        virtual uint32_t HandleInterrupt(uint32_t esp);
     };
 
+
     class InterruptManager
     {
         friend class InterruptHandler;
@@ -29,6 +28,7 @@
 
             static InterruptManager* ActiveInterruptManager;
             InterruptHandler* handlers[256];
+
             struct GateDescriptor
             {
                 uint16_t handlerAddressLowBits;
@@ -48,8 +48,8 @@
 
             uint16_t hardwareInterruptOffset;
             static void SetInterruptDescriptorTableEntry(uint8_t interrupt,
-            uint16_t codeSegmentSelectorOffset, void (*handler)(),
-            uint8_t DescriptorPrivilegeLevel, uint8_t DescriptorType);
+                uint16_t codeSegmentSelectorOffset, void (*handler)(),
+                uint8_t DescriptorPrivilegeLevel, uint8_t DescriptorType);
 
 
             static void InterruptIgnore();
@@ -93,21 +93,19 @@
             static void HandleException0x12();
             static void HandleException0x13();
 
-            Port8BitSlow picMasterCommand;
-            Port8BitSlow picMasterData;
-            Port8BitSlow picSlaveCommand;
-            Port8BitSlow picSlaveData;
+            static uint32_t HandleInterrupt(uint8_t interrupt, uint32_t esp);
+            uint32_t DoHandleInterrupt(uint8_t interrupt, uint32_t esp);
+
+            Port8BitSlow programmableInterruptControllerMasterCommandPort;
+            Port8BitSlow programmableInterruptControllerMasterDataPort;
+            Port8BitSlow programmableInterruptControllerSlaveCommandPort;
+            Port8BitSlow programmableInterruptControllerSlaveDataPort;
 
         public:
             InterruptManager(uint16_t hardwareInterruptOffset, GlobalDescriptorTable* globalDescriptorTable);
             ~InterruptManager();
-
-            static uint32_t HandleInterrupt(uint8_t interrupt, uint32_t esp);
-            uint32_t DoHandleInterrupt(uint8_t interruptNumber, uint32_t esp);
             uint16_t HardwareInterruptOffset();
             void Activate();
             void Deactivate();
     };
-
-    
 #endif
\ No newline at end of file
Binary files /home/dys/Desktop/os_dev/DysOS/interrupts.o and /home/dys/Desktop/os_dev/wyoos/interrupts.o differ
Binary files /home/dys/Desktop/os_dev/DysOS/interruptstubs.o and /home/dys/Desktop/os_dev/wyoos/interruptstubs.o differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/interruptstubs.s /home/dys/Desktop/os_dev/wyoos/interruptstubs.s
--- /home/dys/Desktop/os_dev/DysOS/interruptstubs.s	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/interruptstubs.s	2025-04-18 11:31:30.244371541 +0200
@@ -1,99 +1,101 @@
-.set IRQ_BASE, 0x20
-
-.section .text
-
-.extern _ZN16InterruptManager15HandleInterruptEhj
-
-
-.macro HandleException num
-.global _ZN16InterruptManager19HandleException\num\()Ev
-_ZN16InterruptManager19HandleException\num\()Ev:
-    movb $\num, (interruptnumber)
-    jmp int_bottom
-.endm
-
-
-.macro HandleInterruptRequest num
-.global _ZN16InterruptManager26HandleInterruptRequest\num\()Ev
-_ZN16InterruptManager26HandleInterruptRequest\num\()Ev:
-    movb $\num + IRQ_BASE, (interruptnumber)
-    jmp int_bottom
-.endm
-
-
-HandleException 0x00
-HandleException 0x01
-HandleException 0x02
-HandleException 0x03
-HandleException 0x04
-HandleException 0x05
-HandleException 0x06
-HandleException 0x07
-HandleException 0x08
-HandleException 0x09
-HandleException 0x0A
-HandleException 0x0B
-HandleException 0x0C
-HandleException 0x0D
-HandleException 0x0E
-HandleException 0x0F
-HandleException 0x10
-HandleException 0x11
-HandleException 0x12
-HandleException 0x13
-
-HandleInterruptRequest 0x00
-HandleInterruptRequest 0x01
-HandleInterruptRequest 0x02
-HandleInterruptRequest 0x03
-HandleInterruptRequest 0x04
-HandleInterruptRequest 0x05
-HandleInterruptRequest 0x06
-HandleInterruptRequest 0x07
-HandleInterruptRequest 0x08
-HandleInterruptRequest 0x09
-HandleInterruptRequest 0x0A
-HandleInterruptRequest 0x0B
-HandleInterruptRequest 0x0C
-HandleInterruptRequest 0x0D
-HandleInterruptRequest 0x0E
-HandleInterruptRequest 0x0F
-HandleInterruptRequest 0x31
-
-int_bottom:
-
-    # register sichern
-    pusha
-    pushl %ds
-    pushl %es
-    pushl %fs
-    pushl %gs
-
-    # ring 0 segment register laden
-    #cld
-    #mov $0x10, %eax
-    #mov %eax, %eds
-    #mov %eax, %ees
-
-    # C++ Handler aufrufen
-    pushl %esp
-    push (interruptnumber)
-    call _ZN16InterruptManager15HandleInterruptEhj
-    add %esp, 6
-    mov %eax, %esp # den stack wechseln
-
-    # register laden
-    pop %gs
-    pop %fs
-    pop %es
-    pop %ds
-    popa
-
-.global _ZN16InterruptManager15InterruptIgnoreEv
-_ZN16InterruptManager15InterruptIgnoreEv:
-
-    iret
-
-
-.data
-    interruptnumber: .byte 0
\ No newline at end of file
+
+
+.set IRQ_BASE, 0x20
+
+.section .text
+
+.extern _ZN16InterruptManager15HandleInterruptEhj
+
+
+.macro HandleException num
+.global _ZN16InterruptManager19HandleException\num\()Ev
+_ZN16InterruptManager19HandleException\num\()Ev:
+    movb $\num, (interruptnumber)
+    jmp int_bottom
+.endm
+
+
+.macro HandleInterruptRequest num
+.global _ZN16InterruptManager26HandleInterruptRequest\num\()Ev
+_ZN16InterruptManager26HandleInterruptRequest\num\()Ev:
+    movb $\num + IRQ_BASE, (interruptnumber)
+    jmp int_bottom
+.endm
+
+
+HandleException 0x00
+HandleException 0x01
+HandleException 0x02
+HandleException 0x03
+HandleException 0x04
+HandleException 0x05
+HandleException 0x06
+HandleException 0x07
+HandleException 0x08
+HandleException 0x09
+HandleException 0x0A
+HandleException 0x0B
+HandleException 0x0C
+HandleException 0x0D
+HandleException 0x0E
+HandleException 0x0F
+HandleException 0x10
+HandleException 0x11
+HandleException 0x12
+HandleException 0x13
+
+HandleInterruptRequest 0x00
+HandleInterruptRequest 0x01
+HandleInterruptRequest 0x02
+HandleInterruptRequest 0x03
+HandleInterruptRequest 0x04
+HandleInterruptRequest 0x05
+HandleInterruptRequest 0x06
+HandleInterruptRequest 0x07
+HandleInterruptRequest 0x08
+HandleInterruptRequest 0x09
+HandleInterruptRequest 0x0A
+HandleInterruptRequest 0x0B
+HandleInterruptRequest 0x0C
+HandleInterruptRequest 0x0D
+HandleInterruptRequest 0x0E
+HandleInterruptRequest 0x0F
+HandleInterruptRequest 0x31
+
+int_bottom:
+
+    # register sichern
+    pusha
+    pushl %ds
+    pushl %es
+    pushl %fs
+    pushl %gs
+
+    # ring 0 segment register laden
+    #cld
+    #mov $0x10, %eax
+    #mov %eax, %eds
+    #mov %eax, %ees
+
+    # C++ Handler aufrufen
+    pushl %esp
+    push (interruptnumber)
+    call _ZN16InterruptManager15HandleInterruptEhj
+    add %esp, 6
+    mov %eax, %esp # den stack wechseln
+
+    # register laden
+    pop %gs
+    pop %fs
+    pop %es
+    pop %ds
+    popa
+
+.global _ZN16InterruptManager15InterruptIgnoreEv
+_ZN16InterruptManager15InterruptIgnoreEv:
+
+    iret
+
+
+.data
+    interruptnumber: .byte 0
diff -ruN /home/dys/Desktop/os_dev/DysOS/kernel.cpp /home/dys/Desktop/os_dev/wyoos/kernel.cpp
--- /home/dys/Desktop/os_dev/DysOS/kernel.cpp	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/kernel.cpp	2025-04-18 11:31:30.244371541 +0200
@@ -1,82 +1,68 @@
+
 #include "types.h"
 #include "gdt.h"
 #include "interrupts.h"
 #include "keyboard.h"
 
-#define HEIGHT 25 
-#define WIDTH 80
-
-
 
-void printf(const char* str) {
-    volatile uint16_t* VideoMemory = (volatile uint16_t*)0xb8000;
-    static uint8_t x = 0; 
-    static uint8_t y = 0; 
+void printf(char* str)
+{
+    static uint16_t* VideoMemory = (uint16_t*)0xb8000;
 
+    static uint8_t x=0,y=0;
 
-    for(uint16_t i = 0; str[i] != '\0'; ++i) {
+    for(int i = 0; str[i] != '\0'; ++i)
+    {
+        switch(str[i])
+        {
+            case '\n':
+                x = 0;
+                y++;
+                break;
+            default:
+                VideoMemory[80*y+x] = (VideoMemory[80*y+x] & 0xFF00) | str[i];
+                x++;
+                break;
+        }
 
-        switch (str[i])
+        if(x >= 80)
         {
-        case '\n':
-            y++;
             x = 0;
-            break;
-        
-        default:
-            VideoMemory[WIDTH*y+x] = (VideoMemory[WIDTH*y+x] & 0xFF00) | str[i];
-            x++;
-            break;
+            y++;
         }
-        if( x >= WIDTH){
+
+        if(y >= 25)
+        {
+            for(y = 0; y < 25; y++)
+                for(x = 0; x < 80; x++)
+                    VideoMemory[80*y+x] = (VideoMemory[80*y+x] & 0xFF00) | ' ';
             x = 0;
-            y++; 
-        }
-        if(y >= 25){
-            for(y = 0;y < HEIGHT;y++){
-                for(x = 0; x < WIDTH; x++){
-                    VideoMemory[WIDTH*y+x] = (VideoMemory[WIDTH*y+x] & 0xFF00) | ' ';
-                }
-            }
-            x = 0; 
             y = 0;
         }
     }
 }
 
-void printfHex(uint8_t key)
-{
-    char* foo = "00";
-    char* hex = "0123456789ABCDEF";
-    foo[0] = hex[(key >> 4) & 0xF];
-    foo[1] = hex[key & 0xF];
-    printf("0x");
-    printf(foo);
-}
 
 
 typedef void (*constructor)();
 extern "C" constructor start_ctors;
 extern "C" constructor end_ctors;
-extern "C" void callConstructors(){
-    for(constructor* i= (constructor*) &start_ctors; i != (constructor*) &end_ctors;i++){
+extern "C" void callConstructors()
+{
+    for(constructor* i = &start_ctors; i != &end_ctors; i++)
         (*i)();
-    }
 }
 
-extern "C" void kernelMain(const void* multiboot_structure, uint32_t /*magicnumber*/ ){
-    
-    printf("\n");
-    printf("===============================================\n");
-    printf("   Welcome to DysOS - The Ultimate 32-bit OS!  \n");
-    printf("      An operating system by Dys \n");
-    printf("===============================================\n");
-    printf("\n");
+
+
+extern "C" void kernelMain(const void* multiboot_structure, uint32_t /*multiboot_magic*/)
+{
+    printf("Hello World! --- http://www.AlgorithMan.de");
+
     GlobalDescriptorTable gdt;
     InterruptManager interrupts(0x20, &gdt);
     KeyboardDriver keyboard(&interrupts);
     interrupts.Activate();
 
-
     while(1);
-}
\ No newline at end of file
+}
Binary files /home/dys/Desktop/os_dev/DysOS/kernel.o and /home/dys/Desktop/os_dev/wyoos/kernel.o differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/keyboard.cpp /home/dys/Desktop/os_dev/wyoos/keyboard.cpp
--- /home/dys/Desktop/os_dev/DysOS/keyboard.cpp	2025-04-18 10:57:10.943465166 +0200
+++ /home/dys/Desktop/os_dev/wyoos/keyboard.cpp	2025-04-18 11:31:30.244371541 +0200
@@ -1,30 +1,90 @@
-#include "keyboard.h"
-
 
-void printf(const char* str);
-void printfHex(uint8_t key);
+#include "keyboard.h"
 
-KeyboardDriver::KeyboardDriver(InterruptManager *interruptManager)
-:InterruptHandler(interruptManager, 0x21),dataPort(0x60), commandPort(0x64)
+KeyboardDriver::KeyboardDriver(InterruptManager* manager)
+: InterruptHandler(manager, 0x21),
+dataport(0x60),
+commandport(0x64)
 {
-    while(commandPort.Read() & 0x1)
-        dataPort.Read();
-    commandPort.Write(0xAE); //activate interrupts
-    commandPort.Write(0x20); //get current state
-    uint8_t status = (dataPort.Read() | 1) & ~0x10;
-    commandPort.Write(0x60); //set state
-    dataPort.Write(status);
-
-    dataPort.Write(0xF4); //activate keyboard
+    while(commandport.Read() & 0x1)
+        dataport.Read();
+    commandport.Write(0xae); // activate interrupts
+    commandport.Write(0x20); // command 0x20 = read controller command byte
+    uint8_t status = (dataport.Read() | 1) & ~0x10;
+    commandport.Write(0x60); // command 0x60 = set controller command byte
+    dataport.Write(status);
+    dataport.Write(0xf4);
 }
 
-KeyboardDriver::~KeyboardDriver(){
-
+KeyboardDriver::~KeyboardDriver()
+{
 }
 
-uint32_t KeyboardDriver::HandleInterrupt(uint32_t esp){
-    uint8_t key = dataPort.Read();
-    printf("KEYBOARD: ");
-    printfHex(key);
+void printf(char*);
+
+uint32_t KeyboardDriver::HandleInterrupt(uint32_t esp)
+{
+    uint8_t key = dataport.Read();
+    if(key < 0x80)
+    {
+        switch(key)
+        {
+            case 0x02: printf("1"); break;
+            case 0x03: printf("2"); break;
+            case 0x04: printf("3"); break;
+            case 0x05: printf("4"); break;
+            case 0x06: printf("5"); break;
+            case 0x07: printf("6"); break;
+            case 0x08: printf("7"); break;
+            case 0x09: printf("8"); break;
+            case 0x0A: printf("9"); break;
+            case 0x0B: printf("0"); break;
+
+            case 0x10: printf("q"); break;
+            case 0x11: printf("w"); break;
+            case 0x12: printf("e"); break;
+            case 0x13: printf("r"); break;
+            case 0x14: printf("t"); break;
+            case 0x15: printf("z"); break;
+            case 0x16: printf("u"); break;
+            case 0x17: printf("i"); break;
+            case 0x18: printf("o"); break;
+            case 0x19: printf("p"); break;
+
+            case 0x1E: printf("a"); break;
+            case 0x1F: printf("s"); break;
+            case 0x20: printf("d"); break;
+            case 0x21: printf("f"); break;
+            case 0x22: printf("g"); break;
+            case 0x23: printf("h"); break;
+            case 0x24: printf("j"); break;
+            case 0x25: printf("k"); break;
+            case 0x26: printf("l"); break;
+
+            case 0x2C: printf("y"); break;
+            case 0x2D: printf("x"); break;
+            case 0x2E: printf("c"); break;
+            case 0x2F: printf("v"); break;
+            case 0x30: printf("b"); break;
+            case 0x31: printf("n"); break;
+            case 0x32: printf("m"); break;
+            case 0x33: printf(","); break;
+            case 0x34: printf("."); break;
+            case 0x35: printf("-"); break;
+
+            case 0x1C: printf("\n"); break;
+            case 0x39: printf(" "); break;
+
+            default:
+            {
+                char* foo = "KEYBOARD 0x00 ";
+                char* hex = "0123456789ABCDEF";
+                foo[11] = hex[(key >> 4) & 0xF];
+                foo[12] = hex[key & 0xF];
+                printf(foo);
+                break;
+            }
+        }
+    }
     return esp;
-}
\ No newline at end of file
+}
diff -ruN /home/dys/Desktop/os_dev/DysOS/keyboard.h /home/dys/Desktop/os_dev/wyoos/keyboard.h
--- /home/dys/Desktop/os_dev/DysOS/keyboard.h	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/keyboard.h	2025-04-18 11:31:30.244371541 +0200
@@ -1,23 +1,19 @@
+
 #ifndef __KEYBOARD_H
 #define __KEYBOARD_H
 
-#include "types.h"
-#include "interrupts.h"
-#include "port.h"
-
-
-class KeyboardDriver : public InterruptHandler
-{
-    Port8Bit dataPort; 
-    Port8Bit commandPort;
-
-    public: 
-        KeyboardDriver(InterruptManager *interruptManager );
+    #include "types.h"
+    #include "interrupts.h"
+    #include "port.h"
+
+    class KeyboardDriver : public InterruptHandler
+    {
+        Port8Bit dataport;
+        Port8Bit commandport;
+    public:
+        KeyboardDriver(InterruptManager* manager);
         ~KeyboardDriver();
         virtual uint32_t HandleInterrupt(uint32_t esp);
-};
-
-
-
+    };
 
 #endif
\ No newline at end of file
Binary files /home/dys/Desktop/os_dev/DysOS/keyboard.o and /home/dys/Desktop/os_dev/wyoos/keyboard.o differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/LICENSE /home/dys/Desktop/os_dev/wyoos/LICENSE
--- /home/dys/Desktop/os_dev/DysOS/LICENSE	1970-01-01 01:00:00.000000000 +0100
+++ /home/dys/Desktop/os_dev/wyoos/LICENSE	2025-04-18 11:31:30.244371541 +0200
@@ -0,0 +1,674 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    {one line to give the program's name and a brief idea of what it does.}
+    Copyright (C) {year}  {name of author}
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    {project}  Copyright (C) {year}  {fullname}
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<http://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<http://www.gnu.org/philosophy/why-not-lgpl.html>.
diff -ruN /home/dys/Desktop/os_dev/DysOS/linker.ld /home/dys/Desktop/os_dev/wyoos/linker.ld
--- /home/dys/Desktop/os_dev/DysOS/linker.ld	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/linker.ld	2025-04-18 11:31:30.244371541 +0200
@@ -1,33 +1,32 @@
-
 ENTRY(loader)
 OUTPUT_FORMAT(elf32-i386)
 OUTPUT_ARCH(i386:i386)
 
-SECTIONS 
+SECTIONS
 {
-    . = 0x0100000;
+  . = 0x0100000;
+
+  .text :
+  {
+    *(.multiboot)
+    *(.text*)
+    *(.rodata)
+  }
+
+  .data  :
+  {
+    start_ctors = .;
+    KEEP(*( .init_array ));
+    KEEP(*(SORT_BY_INIT_PRIORITY( .init_array.* )));
+    end_ctors = .;
+
+    *(.data)
+  }
+
+  .bss  :
+  {
+    *(.bss)
+  }
 
-    .text : {
-        *(.multiboot)
-        *(.text*)
-        *(.rodata)
-    }
-    .data : {
-        start_ctors = .;
-        KEEP(*( .init_array ));
-        KEEP(*(SORT_BY_INIT_PRIORITY( .init_array.* )));
-        end_ctors = .;
-
-        *(.data)
-
-    }
-    .bss : {
-        *(.bss)
-    }
-
-    /DISCARD/ : 
-    {
-        *(.fini_array*)
-        *(.comment)
-    }
-}
\ No newline at end of file
+  /DISCARD/ : { *(.fini_array*) *(.comment) }
+}
Binary files /home/dys/Desktop/os_dev/DysOS/loader.o and /home/dys/Desktop/os_dev/wyoos/loader.o differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/loader.s /home/dys/Desktop/os_dev/wyoos/loader.s
--- /home/dys/Desktop/os_dev/DysOS/loader.s	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/loader.s	2025-04-18 11:31:30.244371541 +0200
@@ -1,31 +1,34 @@
-.section .multiboot
-.set MAGIC, 0x1BADB002
+.set MAGIC, 0x1badb002
 .set FLAGS, (1<<0 | 1<<1)
 .set CHECKSUM, -(MAGIC + FLAGS)
 
-.long MAGIC
-.long FLAGS
-.long CHECKSUM
+.section .multiboot
+    .long MAGIC
+    .long FLAGS
+    .long CHECKSUM
+
 
 .section .text
 .extern kernelMain
 .extern callConstructors
 .global loader
 
-loader:
-
-    movl $kernel_stack, %esp
 
+loader:
+    mov $kernel_stack, %esp
     call callConstructors
-
-    pushl %eax 
-    pushl %ebx
+    push %eax
+    push %ebx
     call kernelMain
 
+
 _stop:
     cli
     hlt
     jmp _stop
 
+
 .section .bss
-.lcomm kernel_stack, 2*1024*1024
\ No newline at end of file
+.space 2*1024*1024; # 2 MiB
+kernel_stack:
+
diff -ruN /home/dys/Desktop/os_dev/DysOS/makefile /home/dys/Desktop/os_dev/wyoos/makefile
--- /home/dys/Desktop/os_dev/DysOS/makefile	1970-01-01 01:00:00.000000000 +0100
+++ /home/dys/Desktop/os_dev/wyoos/makefile	2025-04-18 11:36:51.939640373 +0200
@@ -0,0 +1,46 @@
+
+# sudo apt-get install g++ binutils libc6-dev-i386
+# sudo apt-get install VirtualBox grub-legacy xorriso
+
+GCCPARAMS = -m32 -fno-use-cxa-atexit -nostdlib -fno-builtin -fno-rtti -fno-exceptions -fno-leading-underscore -Wno-write-strings
+ASPARAMS = --32
+LDPARAMS = -melf_i386
+
+objects = loader.o gdt.o port.o interruptstubs.o interrupts.o keyboard.o kernel.o
+
+
+run: mykernel.iso
+	VBoxManage controlvm "testos" poweroff || true
+	sleep 2 
+	VBoxManage startvm "testos" --type gui
+
+%.o: %.cpp
+	gcc $(GCCPARAMS) -c -o $@ $<
+
+%.o: %.s
+	as $(ASPARAMS) -o $@ $<
+
+mykernel.bin: linker.ld $(objects)
+	ld $(LDPARAMS) -T $< -o $@ $(objects)
+
+mykernel.iso: mykernel.bin
+	mkdir iso
+	mkdir iso/boot
+	mkdir iso/boot/grub
+	cp mykernel.bin iso/boot/mykernel.bin
+	echo 'set timeout=0'                      > iso/boot/grub/grub.cfg
+	echo 'set default=0'                     >> iso/boot/grub/grub.cfg
+	echo ''                                  >> iso/boot/grub/grub.cfg
+	echo 'menuentry "My Operating System" {' >> iso/boot/grub/grub.cfg
+	echo '  multiboot /boot/mykernel.bin'    >> iso/boot/grub/grub.cfg
+	echo '  boot'                            >> iso/boot/grub/grub.cfg
+	echo '}'                                 >> iso/boot/grub/grub.cfg
+	grub-mkrescue --output=mykernel.iso iso
+	rm -rf iso
+
+install: mykernel.bin
+	sudo cp $< /boot/mykernel.bin
+
+.PHONY: clean
+clean:
+	rm -f $(objects) mykernel.bin mykernel.iso
diff -ruN /home/dys/Desktop/os_dev/DysOS/Makefile /home/dys/Desktop/os_dev/wyoos/Makefile
--- /home/dys/Desktop/os_dev/DysOS/Makefile	2025-04-18 11:04:30.917678753 +0200
+++ /home/dys/Desktop/os_dev/wyoos/Makefile	1970-01-01 01:00:00.000000000 +0100
@@ -1,54 +0,0 @@
-CPPPARAMS = -m32 \
-            -nostdlib -nostdinc -static -ffreestanding \
-            -fno-builtin -fno-rtti -fno-exceptions -fno-use-cxa-atexit \
-            -fno-leading-underscore -fno-omit-frame-pointer \
-            -fpermissive -Wall -Wextra -Werror \
-            -Wno-error=unused-variable -Wno-error=unused-parameter -Wno-write-strings \
-            -mno-red-zone -mno-sse -mno-sse2 -mno-mmx -mno-80387\
-			-fno-pie -no-pie -fno-pic\
-    
-
-ASPARAMS = --32
-LDPARAMS = -melf_i386
-
-build_dir = build
-objects = $(build_dir)/loader.o $(build_dir)/kernel.o $(build_dir)/gdt.o $(build_dir)/port.o $(build_dir)/interruptstubs.o $(build_dir)/interrupts.o $(build_dir)/keyboard.o
-
-$(build_dir):
-	mkdir -p $(build_dir)
-
-$(build_dir)/%.o: %.cpp | $(build_dir)
-	g++ $(CPPPARAMS) -o $@ -c $<
-
-$(build_dir)/%.o: %.s | $(build_dir)
-	as $(ASPARAMS) -o $@ $<
-
-$(build_dir)/kernel.bin: linker.ld $(objects)
-	ld $(LDPARAMS) -T $< -o $@ $(objects)
-
-install: $(build_dir)/kernel.bin
-	sudo cp $< /boot/kernel.bin
-
-$(build_dir)/kernel.iso: $(build_dir)/kernel.bin
-	mkdir -p iso/boot/grub
-	cp $< iso/boot/
-	echo 'set timeout=0' > iso/boot/grub/grub.cfg
-	echo 'set default=0' >> iso/boot/grub/grub.cfg
-	echo '' >> iso/boot/grub/grub.cfg
-	echo 'menuentry "DysOS" {' >> iso/boot/grub/grub.cfg
-	echo '	multiboot /boot/kernel.bin' >> iso/boot/grub/grub.cfg
-	echo '	boot' >> iso/boot/grub/grub.cfg
-	echo '}' >> iso/boot/grub/grub.cfg
-
-	grub-mkrescue --output=$@ iso 
-	rm -rf iso 
-
-run: $(build_dir)/kernel.iso
-	VBoxManage controlvm "DysOS" poweroff || true
-	sleep 2 
-	VBoxManage startvm "DysOS" --type gui
-
-clean:
-	find $(build_dir) -type f \( -name '*.o' -o -name '*.bin' -o -name '*.iso' \) -delete
-	rm -f *.iso
-	rm -rf iso
\ No newline at end of file
Binary files /home/dys/Desktop/os_dev/DysOS/mykernel.bin and /home/dys/Desktop/os_dev/wyoos/mykernel.bin differ
Binary files /home/dys/Desktop/os_dev/DysOS/mykernel.iso and /home/dys/Desktop/os_dev/wyoos/mykernel.iso differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/port.cpp /home/dys/Desktop/os_dev/wyoos/port.cpp
--- /home/dys/Desktop/os_dev/DysOS/port.cpp	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/port.cpp	2025-04-18 11:31:30.244371541 +0200
@@ -1,88 +1,100 @@
-#include "port.h"
-
 
-void operator delete(void* p, unsigned int) {}
-void operator delete(void* p) {}
+#include "port.h"
 
 
-Port::Port(uint16_t portnumber){
+Port::Port(uint16_t portnumber)
+{
     this->portnumber = portnumber;
 }
-Port::~Port(){}
+
+Port::~Port()
+{
+}
+
+
 
 
-//PORT8_BIT
 
 Port8Bit::Port8Bit(uint16_t portnumber)
-:Port(portnumber){}
+    : Port(portnumber)
+{
+}
 
-Port8Bit::~Port8Bit(){}
+Port8Bit::~Port8Bit()
+{
+}
 
-void Port8Bit::Write(uint8_t data){
-    __asm__ volatile("outb %0, %1" : : "a" (data), "Nd" (portnumber));
+void Port8Bit::Write(uint8_t data)
+{
+    Write8(portnumber, data);
 }
 
-uint8_t Port8Bit::Read(){
-    uint8_t result;
-    __asm__ volatile("inb %1, %0" : "=a" (result) : "Nd" (portnumber));
-    return result;
+uint8_t Port8Bit::Read()
+{
+    return Read8(portnumber);
 }
 
 
-//POR16_BIT
 
 
-Port16Bit::Port16Bit(uint16_t portnumber)
-:Port(portnumber){}
 
-Port16Bit::~Port16Bit(){}
+Port8BitSlow::Port8BitSlow(uint16_t portnumber)
+    : Port8Bit(portnumber)
+{
+}
 
-void Port16Bit::Write(uint16_t data){
-    __asm__ volatile("outw %0, %1" : : "a" (data), "Nd" (portnumber));
+Port8BitSlow::~Port8BitSlow()
+{
 }
 
-uint16_t Port16Bit::Read(){
-    uint16_t result;
-    __asm__ volatile("inw %1, %0" : "=a" (result) : "Nd" (portnumber));
-    return result;
+void Port8BitSlow::Write(uint8_t data)
+{
+    Write8Slow(portnumber, data);
 }
 
-//PORT32_BIT
 
 
-Port32Bit::Port32Bit(uint16_t portnumber)
-:Port(portnumber){}
 
-Port32Bit::~Port32Bit(){}
 
-void Port32Bit::Write(uint32_t data){
-    __asm__ volatile("outl %0, %1" : : "a" (data), "Nd" (portnumber));
+Port16Bit::Port16Bit(uint16_t portnumber)
+    : Port(portnumber)
+{
 }
 
-uint32_t Port32Bit::Read(){
-    uint32_t result;
-    __asm__ volatile("inl %1, %0" : "=a" (result) : "Nd" (portnumber));
-    return result;
+Port16Bit::~Port16Bit()
+{
 }
 
-
-//PORT8_BIT_SLOW
-
-Port8BitSlow::Port8BitSlow(uint16_t portnumber)
-:Port(portnumber){}
-
-Port8BitSlow::~Port8BitSlow(){}
-
-void Port8BitSlow::Write(uint8_t data){
-    __asm__ volatile("outb %0, %1\njmp 1f\n1: jmp 1f\n1:" : : "a" (data), "Nd" (portnumber));
+void Port16Bit::Write(uint16_t data)
+{
+    Write16(portnumber, data);
 }
 
+uint16_t Port16Bit::Read()
+{
+    return Read16(portnumber);
+}
 
 
 
 
 
+Port32Bit::Port32Bit(uint16_t portnumber)
+    : Port(portnumber)
+{
+}
 
+Port32Bit::~Port32Bit()
+{
+}
 
+void Port32Bit::Write(uint32_t data)
+{
+    Write32(portnumber, data);
+}
 
+uint32_t Port32Bit::Read()
+{
+    return Read32(portnumber);
+}
 
diff -ruN /home/dys/Desktop/os_dev/DysOS/port.h /home/dys/Desktop/os_dev/wyoos/port.h
--- /home/dys/Desktop/os_dev/DysOS/port.h	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/port.h	2025-04-18 11:31:30.244371541 +0200
@@ -1,50 +1,111 @@
+
 #ifndef __PORT_H
 #define __PORT_H
 
-#include "types.h"
+    #include "types.h"
 
 
-    class Port{
-        protected: 
-            uint16_t portnumber;
+    class Port
+    {
+        protected:
             Port(uint16_t portnumber);
-            ~Port();    
-            
+            // FIXME: Must be virtual (currently isnt because the kernel has no memory management yet)
+            ~Port();
+            uint16_t portnumber;
     };
 
-    class Port8Bit : public Port{
-        public: 
-            Port8Bit(uint16_t portnumber); 
+    
+    class Port8Bit : public Port
+    {
+        public:
+            Port8Bit(uint16_t portnumber);
             ~Port8Bit();
-            virtual void Write(uint8_t data);
+
             virtual uint8_t Read();
+            virtual void Write(uint8_t data);
+
+        protected:
+            static inline uint8_t Read8(uint16_t _port)
+            {
+                uint8_t result;
+                __asm__ volatile("inb %1, %0" : "=a" (result) : "Nd" (_port));
+                return result;
+            }
+
+            static inline void Write8(uint16_t _port, uint8_t _data)
+            {
+                __asm__ volatile("outb %0, %1" : : "a" (_data), "Nd" (_port));
+            }
     };
 
-    class Port8BitSlow : public Port{
+
+
+    class Port8BitSlow : public Port8Bit
+    {
         public:
-            Port8BitSlow(uint16_t portnumber); 
+            Port8BitSlow(uint16_t portnumber);
             ~Port8BitSlow();
+
             virtual void Write(uint8_t data);
+        protected:
+            static inline void Write8Slow(uint16_t _port, uint8_t _data)
+            {
+                __asm__ volatile("outb %0, %1\njmp 1f\n1: jmp 1f\n1:" : : "a" (_data), "Nd" (_port));
+            }
+
     };
 
 
 
-    class Port16Bit : public Port{
-        public: 
-            Port16Bit(uint16_t portnumber); 
+    class Port16Bit : public Port
+    {
+        public:
+            Port16Bit(uint16_t portnumber);
             ~Port16Bit();
-            virtual void Write(uint16_t data);
+
             virtual uint16_t Read();
+            virtual void Write(uint16_t data);
+
+        protected:
+            static inline uint16_t Read16(uint16_t _port)
+            {
+                uint16_t result;
+                __asm__ volatile("inw %1, %0" : "=a" (result) : "Nd" (_port));
+                return result;
+            }
+
+            static inline void Write16(uint16_t _port, uint16_t _data)
+            {
+                __asm__ volatile("outw %0, %1" : : "a" (_data), "Nd" (_port));
+            }
     };
 
-    class Port32Bit : public Port{
-        public: 
-            Port32Bit(uint16_t portnumber); 
+
+
+    class Port32Bit : public Port
+    {
+        public:
+            Port32Bit(uint16_t portnumber);
             ~Port32Bit();
-            virtual void Write(uint32_t data);
+
             virtual uint32_t Read();
+            virtual void Write(uint32_t data);
+
+        protected:
+            static inline uint32_t Read32(uint16_t _port)
+            {
+                uint32_t result;
+                __asm__ volatile("inl %1, %0" : "=a" (result) : "Nd" (_port));
+                return result;
+            }
+
+            static inline void Write32(uint16_t _port, uint32_t _data)
+            {
+                __asm__ volatile("outl %0, %1" : : "a"(_data), "Nd" (_port));
+            }
     };
 
 
 
-#endif
\ No newline at end of file
+
+#endif
Binary files /home/dys/Desktop/os_dev/DysOS/port.o and /home/dys/Desktop/os_dev/wyoos/port.o differ
diff -ruN /home/dys/Desktop/os_dev/DysOS/size.h /home/dys/Desktop/os_dev/wyoos/size.h
--- /home/dys/Desktop/os_dev/DysOS/size.h	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/size.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-#ifndef __SIZE_H
-#define __SIZE_H
-
-#define KB (1024UL)
-
-#define MB (KB * 1024UL)
-
-#define GB (MB * 1024UL)
-
-#endif
\ No newline at end of file
diff -ruN /home/dys/Desktop/os_dev/DysOS/types.h /home/dys/Desktop/os_dev/wyoos/types.h
--- /home/dys/Desktop/os_dev/DysOS/types.h	2025-04-17 11:18:45.668534035 +0200
+++ /home/dys/Desktop/os_dev/wyoos/types.h	2025-04-18 11:31:30.244371541 +0200
@@ -1,17 +1,13 @@
 #ifndef __TYPES_H
 #define __TYPES_H
 
-    typedef char int8_t;
-    typedef unsigned char uint8_t;
-
-    typedef short int16_t;
-    typedef unsigned short uint16_t;
-
-    typedef int int32_t;
-    typedef unsigned int uint32_t;
-
-    typedef long long int int64_t;
+    typedef char                     int8_t;
+    typedef unsigned char           uint8_t;
+    typedef short                   int16_t;
+    typedef unsigned short         uint16_t;
+    typedef int                     int32_t;
+    typedef unsigned int           uint32_t;
+    typedef long long int           int64_t;
     typedef unsigned long long int uint64_t;
-
-
+    
 #endif
\ No newline at end of file
